{"ast":null,"code":"import { i as isDataSource } from './data-source-D34wiQZj.mjs';\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]], \"*\"];\nconst _c1 = [\"caption\", \"colgroup, col\", \"*\"];\nfunction CdkTable_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 2);\n  }\n}\nfunction CdkTable_Conditional_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"thead\", 0);\n    i0.ɵɵelementContainer(1, 1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"tbody\", 0);\n    i0.ɵɵelementContainer(3, 2)(4, 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"tfoot\", 0);\n    i0.ɵɵelementContainer(6, 4);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CdkTable_Conditional_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 1)(1, 2)(2, 3)(3, 4);\n  }\n}\nfunction CdkTextColumn_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n  }\n}\nfunction CdkTextColumn_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.dataAccessor(data_r2, ctx_r0.name), \" \");\n  }\n}\nexport { D as DataSource } from './data-source-D34wiQZj.mjs';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, TemplateRef, Directive, booleanAttribute, Input, ContentChild, ElementRef, NgZone, Injectable, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, afterNextRender, ChangeDetectorRef, EventEmitter, Injector, HostAttributeToken, Output, ContentChildren, ViewChild, NgModule } from '@angular/core';\nimport { Subject, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { b as _VIEW_REPEATER_STRATEGY, _ as _RecycleViewRepeaterStrategy, a as _ViewRepeaterOperation } from './recycle-view-repeater-strategy-DoWdPqVw.mjs';\nimport { _ as _DisposeViewRepeaterStrategy } from './dispose-view-repeater-strategy-D_JReLI1.mjs';\nimport { D as Directionality } from './directionality-CBXD4hga.mjs';\nimport { P as Platform } from './platform-DmdVEw_C.mjs';\nimport { ViewportRuler, ScrollingModule } from './scrolling.mjs';\nimport { c as coerceBooleanProperty } from './boolean-property-DaaVhX5A.mjs';\nimport './element-x4z00URv.mjs';\nimport './scrolling-BkvA05C8.mjs';\nimport './bidi.mjs';\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n  /** @docs-private */\n  template = inject(TemplateRef);\n  constructor() {}\n  static ɵfac = function CdkCellDef_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkCellDef)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkCellDef,\n    selectors: [[\"\", \"cdkCellDef\", \"\"]]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCellDef]'\n    }]\n  }], () => [], null);\n})();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n  /** @docs-private */\n  template = inject(TemplateRef);\n  constructor() {}\n  static ɵfac = function CdkHeaderCellDef_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkHeaderCellDef)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkHeaderCellDef,\n    selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkHeaderCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkHeaderCellDef]'\n    }]\n  }], () => [], null);\n})();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n  /** @docs-private */\n  template = inject(TemplateRef);\n  constructor() {}\n  static ɵfac = function CdkFooterCellDef_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkFooterCellDef)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkFooterCellDef,\n    selectors: [[\"\", \"cdkFooterCellDef\", \"\"]]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkFooterCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkFooterCellDef]'\n    }]\n  }], () => [], null);\n})();\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef {\n  _table = inject(CDK_TABLE, {\n    optional: true\n  });\n  _hasStickyChanged = false;\n  /** Unique name for this column. */\n  get name() {\n    return this._name;\n  }\n  set name(name) {\n    this._setNameInput(name);\n  }\n  _name;\n  /** Whether the cell is sticky. */\n  get sticky() {\n    return this._sticky;\n  }\n  set sticky(value) {\n    if (value !== this._sticky) {\n      this._sticky = value;\n      this._hasStickyChanged = true;\n    }\n  }\n  _sticky = false;\n  /**\n   * Whether this column should be sticky positioned on the end of the row. Should make sure\n   * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n   * has been changed.\n   */\n  get stickyEnd() {\n    return this._stickyEnd;\n  }\n  set stickyEnd(value) {\n    if (value !== this._stickyEnd) {\n      this._stickyEnd = value;\n      this._hasStickyChanged = true;\n    }\n  }\n  _stickyEnd = false;\n  /** @docs-private */\n  cell;\n  /** @docs-private */\n  headerCell;\n  /** @docs-private */\n  footerCell;\n  /**\n   * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n   * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n   * do not match are replaced by the '-' character.\n   */\n  cssClassFriendlyName;\n  /**\n   * Class name for cells in this column.\n   * @docs-private\n   */\n  _columnCssClassName;\n  constructor() {}\n  /** Whether the sticky state has changed. */\n  hasStickyChanged() {\n    const hasStickyChanged = this._hasStickyChanged;\n    this.resetStickyChanged();\n    return hasStickyChanged;\n  }\n  /** Resets the sticky changed state. */\n  resetStickyChanged() {\n    this._hasStickyChanged = false;\n  }\n  /**\n   * Overridable method that sets the css classes that will be added to every cell in this\n   * column.\n   * In the future, columnCssClassName will change from type string[] to string and this\n   * will set a single string value.\n   * @docs-private\n   */\n  _updateColumnCssClassName() {\n    this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n  }\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  _setNameInput(value) {\n    // If the directive is set without a name (updated programmatically), then this setter will\n    // trigger with an empty string and should not overwrite the programmatically set value.\n    if (value) {\n      this._name = value;\n      this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n      this._updateColumnCssClassName();\n    }\n  }\n  static ɵfac = function CdkColumnDef_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkColumnDef)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkColumnDef,\n    selectors: [[\"\", \"cdkColumnDef\", \"\"]],\n    contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, CdkCellDef, 5);\n        i0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 5);\n        i0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n      }\n    },\n    inputs: {\n      name: [0, \"cdkColumnDef\", \"name\"],\n      sticky: [2, \"sticky\", \"sticky\", booleanAttribute],\n      stickyEnd: [2, \"stickyEnd\", \"stickyEnd\", booleanAttribute]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n      useExisting: CdkColumnDef\n    }])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkColumnDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkColumnDef]',\n      providers: [{\n        provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n        useExisting: CdkColumnDef\n      }]\n    }]\n  }], () => [], {\n    name: [{\n      type: Input,\n      args: ['cdkColumnDef']\n    }],\n    sticky: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    stickyEnd: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    cell: [{\n      type: ContentChild,\n      args: [CdkCellDef]\n    }],\n    headerCell: [{\n      type: ContentChild,\n      args: [CdkHeaderCellDef]\n    }],\n    footerCell: [{\n      type: ContentChild,\n      args: [CdkFooterCellDef]\n    }]\n  });\n})();\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n  constructor(columnDef, elementRef) {\n    elementRef.nativeElement.classList.add(...columnDef._columnCssClassName);\n  }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n  constructor() {\n    super(inject(CdkColumnDef), inject(ElementRef));\n  }\n  static ɵfac = function CdkHeaderCell_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkHeaderCell)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkHeaderCell,\n    selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]],\n    hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkHeaderCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-header-cell, th[cdk-header-cell]',\n      host: {\n        'class': 'cdk-header-cell',\n        'role': 'columnheader'\n      }\n    }]\n  }], () => [], null);\n})();\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n  constructor() {\n    const columnDef = inject(CdkColumnDef);\n    const elementRef = inject(ElementRef);\n    super(columnDef, elementRef);\n    const role = columnDef._table?._getCellRole();\n    if (role) {\n      elementRef.nativeElement.setAttribute('role', role);\n    }\n  }\n  static ɵfac = function CdkFooterCell_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkFooterCell)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkFooterCell,\n    selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]],\n    hostAttrs: [1, \"cdk-footer-cell\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkFooterCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n      host: {\n        'class': 'cdk-footer-cell'\n      }\n    }]\n  }], () => [], null);\n})();\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n  constructor() {\n    const columnDef = inject(CdkColumnDef);\n    const elementRef = inject(ElementRef);\n    super(columnDef, elementRef);\n    const role = columnDef._table?._getCellRole();\n    if (role) {\n      elementRef.nativeElement.setAttribute('role', role);\n    }\n  }\n  static ɵfac = function CdkCell_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkCell)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkCell,\n    selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]],\n    hostAttrs: [1, \"cdk-cell\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-cell, td[cdk-cell]',\n      host: {\n        'class': 'cdk-cell'\n      }\n    }]\n  }], () => [], null);\n})();\n\n/**\n * @docs-private\n */\nclass _Schedule {\n  tasks = [];\n  endTasks = [];\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n  _currentSchedule = null;\n  _ngZone = inject(NgZone);\n  constructor() {}\n  /**\n   * Schedules the specified task to run at the end of the current VM turn.\n   */\n  schedule(task) {\n    this._createScheduleIfNeeded();\n    this._currentSchedule.tasks.push(task);\n  }\n  /**\n   * Schedules the specified task to run after other scheduled tasks at the end of the current\n   * VM turn.\n   */\n  scheduleEnd(task) {\n    this._createScheduleIfNeeded();\n    this._currentSchedule.endTasks.push(task);\n  }\n  _createScheduleIfNeeded() {\n    if (this._currentSchedule) {\n      return;\n    }\n    this._currentSchedule = new _Schedule();\n    this._ngZone.runOutsideAngular(() =>\n    // TODO(mmalerba): Scheduling this using something that runs less frequently\n    //  (e.g. requestAnimationFrame, setTimeout, etc.) causes noticeable jank with the column\n    //  resizer. We should audit the usages of schedule / scheduleEnd in that component and see\n    //  if we can refactor it so that we don't need to flush the tasks quite so frequently.\n    queueMicrotask(() => {\n      while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n        const schedule = this._currentSchedule;\n        // Capture new tasks scheduled by the current set of tasks.\n        this._currentSchedule = new _Schedule();\n        for (const task of schedule.tasks) {\n          task();\n        }\n        for (const task of schedule.endTasks) {\n          task();\n        }\n      }\n      this._currentSchedule = null;\n    }));\n  }\n  static ɵfac = function _CoalescedStyleScheduler_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || _CoalescedStyleScheduler)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: _CoalescedStyleScheduler,\n    factory: _CoalescedStyleScheduler.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_CoalescedStyleScheduler, [{\n    type: Injectable\n  }], () => [], null);\n})();\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n  template = inject(TemplateRef);\n  _differs = inject(IterableDiffers);\n  /** The columns to be displayed on this row. */\n  columns;\n  /** Differ used to check if any changes were made to the columns. */\n  _columnsDiffer;\n  constructor() {}\n  ngOnChanges(changes) {\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n    // of the columns property or an empty array if none is provided.\n    if (!this._columnsDiffer) {\n      const columns = changes['columns'] && changes['columns'].currentValue || [];\n      this._columnsDiffer = this._differs.find(columns).create();\n      this._columnsDiffer.diff(columns);\n    }\n  }\n  /**\n   * Returns the difference between the current columns and the columns from the last diff, or null\n   * if there is no difference.\n   */\n  getColumnsDiff() {\n    return this._columnsDiffer.diff(this.columns);\n  }\n  /** Gets this row def's relevant cell template from the provided column def. */\n  extractCellTemplate(column) {\n    if (this instanceof CdkHeaderRowDef) {\n      return column.headerCell.template;\n    }\n    if (this instanceof CdkFooterRowDef) {\n      return column.footerCell.template;\n    } else {\n      return column.cell.template;\n    }\n  }\n  static ɵfac = function BaseRowDef_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || BaseRowDef)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BaseRowDef,\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseRowDef, [{\n    type: Directive\n  }], () => [], null);\n})();\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends BaseRowDef {\n  _table = inject(CDK_TABLE, {\n    optional: true\n  });\n  _hasStickyChanged = false;\n  /** Whether the row is sticky. */\n  get sticky() {\n    return this._sticky;\n  }\n  set sticky(value) {\n    if (value !== this._sticky) {\n      this._sticky = value;\n      this._hasStickyChanged = true;\n    }\n  }\n  _sticky = false;\n  constructor() {\n    super(inject(TemplateRef), inject(IterableDiffers));\n  }\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n  /** Whether the sticky state has changed. */\n  hasStickyChanged() {\n    const hasStickyChanged = this._hasStickyChanged;\n    this.resetStickyChanged();\n    return hasStickyChanged;\n  }\n  /** Resets the sticky changed state. */\n  resetStickyChanged() {\n    this._hasStickyChanged = false;\n  }\n  static ɵfac = function CdkHeaderRowDef_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkHeaderRowDef)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkHeaderRowDef,\n    selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]],\n    inputs: {\n      columns: [0, \"cdkHeaderRowDef\", \"columns\"],\n      sticky: [2, \"cdkHeaderRowDefSticky\", \"sticky\", booleanAttribute]\n    },\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkHeaderRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkHeaderRowDef]',\n      inputs: [{\n        name: 'columns',\n        alias: 'cdkHeaderRowDef'\n      }]\n    }]\n  }], () => [], {\n    sticky: [{\n      type: Input,\n      args: [{\n        alias: 'cdkHeaderRowDefSticky',\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends BaseRowDef {\n  _table = inject(CDK_TABLE, {\n    optional: true\n  });\n  _hasStickyChanged = false;\n  /** Whether the row is sticky. */\n  get sticky() {\n    return this._sticky;\n  }\n  set sticky(value) {\n    if (value !== this._sticky) {\n      this._sticky = value;\n      this._hasStickyChanged = true;\n    }\n  }\n  _sticky = false;\n  constructor() {\n    super(inject(TemplateRef), inject(IterableDiffers));\n  }\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n  /** Whether the sticky state has changed. */\n  hasStickyChanged() {\n    const hasStickyChanged = this._hasStickyChanged;\n    this.resetStickyChanged();\n    return hasStickyChanged;\n  }\n  /** Resets the sticky changed state. */\n  resetStickyChanged() {\n    this._hasStickyChanged = false;\n  }\n  static ɵfac = function CdkFooterRowDef_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkFooterRowDef)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkFooterRowDef,\n    selectors: [[\"\", \"cdkFooterRowDef\", \"\"]],\n    inputs: {\n      columns: [0, \"cdkFooterRowDef\", \"columns\"],\n      sticky: [2, \"cdkFooterRowDefSticky\", \"sticky\", booleanAttribute]\n    },\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkFooterRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkFooterRowDef]',\n      inputs: [{\n        name: 'columns',\n        alias: 'cdkFooterRowDef'\n      }]\n    }]\n  }], () => [], {\n    sticky: [{\n      type: Input,\n      args: [{\n        alias: 'cdkFooterRowDefSticky',\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n  _table = inject(CDK_TABLE, {\n    optional: true\n  });\n  /**\n   * Function that should return true if this row template should be used for the provided index\n   * and row data. If left undefined, this row will be considered the default row template to use\n   * when no other when functions return true for the data.\n   * For every row, there must be at least one when function that passes or an undefined to default.\n   */\n  when;\n  constructor() {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    super(inject(TemplateRef), inject(IterableDiffers));\n  }\n  static ɵfac = function CdkRowDef_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkRowDef)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkRowDef,\n    selectors: [[\"\", \"cdkRowDef\", \"\"]],\n    inputs: {\n      columns: [0, \"cdkRowDefColumns\", \"columns\"],\n      when: [0, \"cdkRowDefWhen\", \"when\"]\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkRowDef]',\n      inputs: [{\n        name: 'columns',\n        alias: 'cdkRowDefColumns'\n      }, {\n        name: 'when',\n        alias: 'cdkRowDefWhen'\n      }]\n    }]\n  }], () => [], null);\n})();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n  _viewContainer = inject(ViewContainerRef);\n  /** The ordered list of cells to render within this outlet's view container */\n  cells;\n  /** The data context to be provided to each cell */\n  context;\n  /**\n   * Static property containing the latest constructed instance of this class.\n   * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n   * createEmbeddedView. After one of these components are created, this property will provide\n   * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n   * construct the cells with the provided context.\n   */\n  static mostRecentCellOutlet = null;\n  constructor() {\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\n  ngOnDestroy() {\n    // If this was the last outlet being rendered in the view, remove the reference\n    // from the static property after it has been destroyed to avoid leaking memory.\n    if (CdkCellOutlet.mostRecentCellOutlet === this) {\n      CdkCellOutlet.mostRecentCellOutlet = null;\n    }\n  }\n  static ɵfac = function CdkCellOutlet_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkCellOutlet)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkCellOutlet,\n    selectors: [[\"\", \"cdkCellOutlet\", \"\"]]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkCellOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCellOutlet]'\n    }]\n  }], () => [], null);\n})();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n  static ɵfac = function CdkHeaderRow_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkHeaderRow)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CdkHeaderRow,\n    selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function CdkHeaderRow_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    dependencies: [CdkCellOutlet],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkHeaderRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-header-row, tr[cdk-header-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-header-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      imports: [CdkCellOutlet]\n    }]\n  }], null, null);\n})();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n  static ɵfac = function CdkFooterRow_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkFooterRow)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CdkFooterRow,\n    selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function CdkFooterRow_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    dependencies: [CdkCellOutlet],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkFooterRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-footer-row, tr[cdk-footer-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-footer-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      imports: [CdkCellOutlet]\n    }]\n  }], null, null);\n})();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n  static ɵfac = function CdkRow_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkRow)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CdkRow,\n    selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function CdkRow_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    dependencies: [CdkCellOutlet],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-row, tr[cdk-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      imports: [CdkCellOutlet]\n    }]\n  }], null, null);\n})();\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n  templateRef = inject(TemplateRef);\n  _contentClassName = 'cdk-no-data-row';\n  constructor() {}\n  static ɵfac = function CdkNoDataRow_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkNoDataRow)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkNoDataRow,\n    selectors: [[\"ng-template\", \"cdkNoDataRow\", \"\"]]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkNoDataRow, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[cdkNoDataRow]'\n    }]\n  }], () => [], null);\n})();\n\n/**\n * Directions that can be used when setting sticky positioning.\n * @docs-private\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n  _isNativeHtmlTable;\n  _stickCellCss;\n  direction;\n  _coalescedStyleScheduler;\n  _isBrowser;\n  _needsPositionStickyOnElement;\n  _positionListener;\n  _tableInjector;\n  _elemSizeCache = new WeakMap();\n  _resizeObserver = globalThis?.ResizeObserver ? new globalThis.ResizeObserver(entries => this._updateCachedSizes(entries)) : null;\n  _updatedStickyColumnsParamsToReplay = [];\n  _stickyColumnsReplayTimeout = null;\n  _cachedCellWidths = [];\n  _borderCellCss;\n  _destroyed = false;\n  /**\n   * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n   *     that uses the native `<table>` element.\n   * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n   *     sticky positioning applied.\n   * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n   *     by reversing left/right positions.\n   * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n   * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n   *     using inline styles. If false, it is assumed that position: sticky is included in\n   *     the component stylesheet for _stickCellCss.\n   * @param _positionListener A listener that is notified of changes to sticky rows/columns\n   *     and their dimensions.\n   * @param _tableInjector The table's Injector.\n   */\n  constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener, _tableInjector) {\n    this._isNativeHtmlTable = _isNativeHtmlTable;\n    this._stickCellCss = _stickCellCss;\n    this.direction = direction;\n    this._coalescedStyleScheduler = _coalescedStyleScheduler;\n    this._isBrowser = _isBrowser;\n    this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n    this._positionListener = _positionListener;\n    this._tableInjector = _tableInjector;\n    this._borderCellCss = {\n      'top': `${_stickCellCss}-border-elem-top`,\n      'bottom': `${_stickCellCss}-border-elem-bottom`,\n      'left': `${_stickCellCss}-border-elem-left`,\n      'right': `${_stickCellCss}-border-elem-right`\n    };\n  }\n  /**\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n   * @param rows The list of rows that should be cleared from sticking in the provided directions\n   * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n   */\n  clearStickyPositioning(rows, stickyDirections) {\n    if (stickyDirections.includes('left') || stickyDirections.includes('right')) {\n      this._removeFromStickyColumnReplayQueue(rows);\n    }\n    const elementsToClear = [];\n    for (const row of rows) {\n      // If the row isn't an element (e.g. if it's an `ng-container`),\n      // it won't have inline styles or `children` so we skip it.\n      if (row.nodeType !== row.ELEMENT_NODE) {\n        continue;\n      }\n      elementsToClear.push(row, ...Array.from(row.children));\n    }\n    // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n    this._afterNextRender({\n      write: () => {\n        for (const element of elementsToClear) {\n          this._removeStickyStyle(element, stickyDirections);\n        }\n      }\n    });\n  }\n  /**\n   * Applies sticky left and right positions to the cells of each row according to the sticky\n   * states of the rendered column definitions.\n   * @param rows The rows that should have its set of cells stuck according to the sticky states.\n   * @param stickyStartStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the start of the row.\n   * @param stickyEndStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the end of the row.\n   * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n   *     column cell. If `false` cached widths will be used instead.\n   * @param replay Whether to enqueue this call for replay after a ResizeObserver update.\n   */\n  updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true, replay = true) {\n    // Don't cache any state if none of the columns are sticky.\n    if (!rows.length || !this._isBrowser || !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))) {\n      this._positionListener?.stickyColumnsUpdated({\n        sizes: []\n      });\n      this._positionListener?.stickyEndColumnsUpdated({\n        sizes: []\n      });\n      return;\n    }\n    // Coalesce with sticky row updates (and potentially other changes like column resize).\n    const firstRow = rows[0];\n    const numCells = firstRow.children.length;\n    const isRtl = this.direction === 'rtl';\n    const start = isRtl ? 'right' : 'left';\n    const end = isRtl ? 'left' : 'right';\n    const lastStickyStart = stickyStartStates.lastIndexOf(true);\n    const firstStickyEnd = stickyEndStates.indexOf(true);\n    let cellWidths;\n    let startPositions;\n    let endPositions;\n    if (replay) {\n      this._updateStickyColumnReplayQueue({\n        rows: [...rows],\n        stickyStartStates: [...stickyStartStates],\n        stickyEndStates: [...stickyEndStates]\n      });\n    }\n    this._afterNextRender({\n      earlyRead: () => {\n        cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n        startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n      },\n      write: () => {\n        for (const row of rows) {\n          for (let i = 0; i < numCells; i++) {\n            const cell = row.children[i];\n            if (stickyStartStates[i]) {\n              this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n            }\n            if (stickyEndStates[i]) {\n              this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n            }\n          }\n        }\n        if (this._positionListener && cellWidths.some(w => !!w)) {\n          this._positionListener.stickyColumnsUpdated({\n            sizes: lastStickyStart === -1 ? [] : cellWidths.slice(0, lastStickyStart + 1).map((width, index) => stickyStartStates[index] ? width : null)\n          });\n          this._positionListener.stickyEndColumnsUpdated({\n            sizes: firstStickyEnd === -1 ? [] : cellWidths.slice(firstStickyEnd).map((width, index) => stickyEndStates[index + firstStickyEnd] ? width : null).reverse()\n          });\n        }\n      }\n    });\n  }\n  /**\n   * Applies sticky positioning to the row's cells if using the native table layout, and to the\n   * row itself otherwise.\n   * @param rowsToStick The list of rows that should be stuck according to their corresponding\n   *     sticky state and to the provided top or bottom position.\n   * @param stickyStates A list of boolean states where each state represents whether the row\n   *     should be stuck in the particular top or bottom position.\n   * @param position The position direction in which the row should be stuck if that row should be\n   *     sticky.\n   *\n   */\n  stickRows(rowsToStick, stickyStates, position) {\n    // Since we can't measure the rows on the server, we can't stick the rows properly.\n    if (!this._isBrowser) {\n      return;\n    }\n    // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n    // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n    // sticky states need to be reversed as well.\n    const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n    const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n    // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n    const stickyOffsets = [];\n    const stickyCellHeights = [];\n    const elementsToStick = [];\n    // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n    // (and potentially other changes like column resize).\n    this._afterNextRender({\n      earlyRead: () => {\n        for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n          if (!states[rowIndex]) {\n            continue;\n          }\n          stickyOffsets[rowIndex] = stickyOffset;\n          const row = rows[rowIndex];\n          elementsToStick[rowIndex] = this._isNativeHtmlTable ? Array.from(row.children) : [row];\n          const height = this._retrieveElementSize(row).height;\n          stickyOffset += height;\n          stickyCellHeights[rowIndex] = height;\n        }\n      },\n      write: () => {\n        const borderedRowIndex = states.lastIndexOf(true);\n        for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n          if (!states[rowIndex]) {\n            continue;\n          }\n          const offset = stickyOffsets[rowIndex];\n          const isBorderedRowIndex = rowIndex === borderedRowIndex;\n          for (const element of elementsToStick[rowIndex]) {\n            this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n          }\n        }\n        if (position === 'top') {\n          this._positionListener?.stickyHeaderRowsUpdated({\n            sizes: stickyCellHeights,\n            offsets: stickyOffsets,\n            elements: elementsToStick\n          });\n        } else {\n          this._positionListener?.stickyFooterRowsUpdated({\n            sizes: stickyCellHeights,\n            offsets: stickyOffsets,\n            elements: elementsToStick\n          });\n        }\n      }\n    });\n  }\n  /**\n   * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n   * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n   * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n   * the tfoot element.\n   */\n  updateStickyFooterContainer(tableElement, stickyStates) {\n    if (!this._isNativeHtmlTable) {\n      return;\n    }\n    // Coalesce with other sticky updates (and potentially other changes like column resize).\n    this._afterNextRender({\n      write: () => {\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n          if (stickyStates.some(state => !state)) {\n            this._removeStickyStyle(tfoot, ['bottom']);\n          } else {\n            this._addStickyStyle(tfoot, 'bottom', 0, false);\n          }\n        }\n      }\n    });\n  }\n  /** Triggered by the table's OnDestroy hook. */\n  destroy() {\n    if (this._stickyColumnsReplayTimeout) {\n      clearTimeout(this._stickyColumnsReplayTimeout);\n    }\n    this._resizeObserver?.disconnect();\n    this._destroyed = true;\n  }\n  /**\n   * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n   * the zIndex, removing each of the provided sticky directions, and removing the\n   * sticky position if there are no more directions.\n   */\n  _removeStickyStyle(element, stickyDirections) {\n    if (!element.classList.contains(this._stickCellCss)) {\n      return;\n    }\n    for (const dir of stickyDirections) {\n      element.style[dir] = '';\n      element.classList.remove(this._borderCellCss[dir]);\n    }\n    // If the element no longer has any more sticky directions, remove sticky positioning and\n    // the sticky CSS class.\n    // Short-circuit checking element.style[dir] for stickyDirections as they\n    // were already removed above.\n    const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n    if (hasDirection) {\n      element.style.zIndex = this._getCalculatedZIndex(element);\n    } else {\n      // When not hasDirection, _getCalculatedZIndex will always return ''.\n      element.style.zIndex = '';\n      if (this._needsPositionStickyOnElement) {\n        element.style.position = '';\n      }\n      element.classList.remove(this._stickCellCss);\n    }\n  }\n  /**\n   * Adds the sticky styling to the element by adding the sticky style class, changing position\n   * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n   * direction and value.\n   */\n  _addStickyStyle(element, dir, dirValue, isBorderElement) {\n    element.classList.add(this._stickCellCss);\n    if (isBorderElement) {\n      element.classList.add(this._borderCellCss[dir]);\n    }\n    element.style[dir] = `${dirValue}px`;\n    element.style.zIndex = this._getCalculatedZIndex(element);\n    if (this._needsPositionStickyOnElement) {\n      element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n    }\n  }\n  /**\n   * Calculate what the z-index should be for the element, depending on what directions (top,\n   * bottom, left, right) have been set. It should be true that elements with a top direction\n   * should have the highest index since these are elements like a table header. If any of those\n   * elements are also sticky in another direction, then they should appear above other elements\n   * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n   * (e.g. footer rows) should then be next in the ordering such that they are below the header\n   * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n   * should minimally increment so that they are above non-sticky elements but below top and bottom\n   * elements.\n   */\n  _getCalculatedZIndex(element) {\n    const zIndexIncrements = {\n      top: 100,\n      bottom: 10,\n      left: 1,\n      right: 1\n    };\n    let zIndex = 0;\n    // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n    // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n    // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n    for (const dir of STICKY_DIRECTIONS) {\n      if (element.style[dir]) {\n        zIndex += zIndexIncrements[dir];\n      }\n    }\n    return zIndex ? `${zIndex}` : '';\n  }\n  /** Gets the widths for each cell in the provided row. */\n  _getCellWidths(row, recalculateCellWidths = true) {\n    if (!recalculateCellWidths && this._cachedCellWidths.length) {\n      return this._cachedCellWidths;\n    }\n    const cellWidths = [];\n    const firstRowCells = row.children;\n    for (let i = 0; i < firstRowCells.length; i++) {\n      const cell = firstRowCells[i];\n      cellWidths.push(this._retrieveElementSize(cell).width);\n    }\n    this._cachedCellWidths = cellWidths;\n    return cellWidths;\n  }\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n  _getStickyStartColumnPositions(widths, stickyStates) {\n    const positions = [];\n    let nextPosition = 0;\n    for (let i = 0; i < widths.length; i++) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n    return positions;\n  }\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n  _getStickyEndColumnPositions(widths, stickyStates) {\n    const positions = [];\n    let nextPosition = 0;\n    for (let i = widths.length; i > 0; i--) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n    return positions;\n  }\n  /**\n   * Retreives the most recently observed size of the specified element from the cache, or\n   * meaures it directly if not yet cached.\n   */\n  _retrieveElementSize(element) {\n    const cachedSize = this._elemSizeCache.get(element);\n    if (cachedSize) {\n      return cachedSize;\n    }\n    const clientRect = element.getBoundingClientRect();\n    const size = {\n      width: clientRect.width,\n      height: clientRect.height\n    };\n    if (!this._resizeObserver) {\n      return size;\n    }\n    this._elemSizeCache.set(element, size);\n    this._resizeObserver.observe(element, {\n      box: 'border-box'\n    });\n    return size;\n  }\n  /**\n   * Conditionally enqueue the requested sticky update and clear previously queued updates\n   * for the same rows.\n   */\n  _updateStickyColumnReplayQueue(params) {\n    this._removeFromStickyColumnReplayQueue(params.rows);\n    // No need to replay if a flush is pending.\n    if (!this._stickyColumnsReplayTimeout) {\n      this._updatedStickyColumnsParamsToReplay.push(params);\n    }\n  }\n  /** Remove updates for the specified rows from the queue. */\n  _removeFromStickyColumnReplayQueue(rows) {\n    const rowsSet = new Set(rows);\n    for (const update of this._updatedStickyColumnsParamsToReplay) {\n      update.rows = update.rows.filter(row => !rowsSet.has(row));\n    }\n    this._updatedStickyColumnsParamsToReplay = this._updatedStickyColumnsParamsToReplay.filter(update => !!update.rows.length);\n  }\n  /** Update _elemSizeCache with the observed sizes. */\n  _updateCachedSizes(entries) {\n    let needsColumnUpdate = false;\n    for (const entry of entries) {\n      const newEntry = entry.borderBoxSize?.length ? {\n        width: entry.borderBoxSize[0].inlineSize,\n        height: entry.borderBoxSize[0].blockSize\n      } : {\n        width: entry.contentRect.width,\n        height: entry.contentRect.height\n      };\n      if (newEntry.width !== this._elemSizeCache.get(entry.target)?.width && isCell(entry.target)) {\n        needsColumnUpdate = true;\n      }\n      this._elemSizeCache.set(entry.target, newEntry);\n    }\n    if (needsColumnUpdate && this._updatedStickyColumnsParamsToReplay.length) {\n      if (this._stickyColumnsReplayTimeout) {\n        clearTimeout(this._stickyColumnsReplayTimeout);\n      }\n      this._stickyColumnsReplayTimeout = setTimeout(() => {\n        if (this._destroyed) {\n          return;\n        }\n        for (const update of this._updatedStickyColumnsParamsToReplay) {\n          this.updateStickyColumns(update.rows, update.stickyStartStates, update.stickyEndStates, true, false);\n        }\n        this._updatedStickyColumnsParamsToReplay = [];\n        this._stickyColumnsReplayTimeout = null;\n      }, 0);\n    }\n  }\n  /**\n   * Invoke afterNextRender with the table's injector, falling back to CoalescedStyleScheduler\n   * if the injector was not provided.\n   */\n  _afterNextRender(spec) {\n    if (this._tableInjector) {\n      afterNextRender(spec, {\n        injector: this._tableInjector\n      });\n    } else {\n      this._coalescedStyleScheduler.schedule(() => {\n        spec.earlyRead?.();\n        spec.write();\n      });\n    }\n  }\n}\nfunction isCell(element) {\n  return ['cdk-cell', 'cdk-header-cell', 'cdk-footer-cell'].some(klass => element.classList.contains(klass));\n}\n\n/**\n * Returns an error to be thrown when attempting to find an nonexistent column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n  return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n  return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n  return Error(`Could not find a matching row definition for the` + `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n  return Error('Missing definitions for header, footer, and row; ' + 'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n  return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n  return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n  return Error(`Table text column must have a name.`);\n}\n\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass CdkRecycleRows {\n  static ɵfac = function CdkRecycleRows_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkRecycleRows)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkRecycleRows,\n    selectors: [[\"cdk-table\", \"recycleRows\", \"\"], [\"table\", \"cdk-table\", \"\", \"recycleRows\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _RecycleViewRepeaterStrategy\n    }])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkRecycleRows, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n      providers: [{\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _RecycleViewRepeaterStrategy\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n  viewContainer = inject(ViewContainerRef);\n  elementRef = inject(ElementRef);\n  constructor() {\n    const table = inject(CDK_TABLE);\n    table._rowOutlet = this;\n    table._outletAssigned();\n  }\n  static ɵfac = function DataRowOutlet_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || DataRowOutlet)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DataRowOutlet,\n    selectors: [[\"\", \"rowOutlet\", \"\"]]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[rowOutlet]'\n    }]\n  }], () => [], null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n  viewContainer = inject(ViewContainerRef);\n  elementRef = inject(ElementRef);\n  constructor() {\n    const table = inject(CDK_TABLE);\n    table._headerRowOutlet = this;\n    table._outletAssigned();\n  }\n  static ɵfac = function HeaderRowOutlet_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || HeaderRowOutlet)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: HeaderRowOutlet,\n    selectors: [[\"\", \"headerRowOutlet\", \"\"]]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeaderRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[headerRowOutlet]'\n    }]\n  }], () => [], null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n  viewContainer = inject(ViewContainerRef);\n  elementRef = inject(ElementRef);\n  constructor() {\n    const table = inject(CDK_TABLE);\n    table._footerRowOutlet = this;\n    table._outletAssigned();\n  }\n  static ɵfac = function FooterRowOutlet_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || FooterRowOutlet)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: FooterRowOutlet,\n    selectors: [[\"\", \"footerRowOutlet\", \"\"]]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FooterRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[footerRowOutlet]'\n    }]\n  }], () => [], null);\n})();\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n  viewContainer = inject(ViewContainerRef);\n  elementRef = inject(ElementRef);\n  constructor() {\n    const table = inject(CDK_TABLE);\n    table._noDataRowOutlet = this;\n    table._outletAssigned();\n  }\n  static ɵfac = function NoDataRowOutlet_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || NoDataRowOutlet)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NoDataRowOutlet,\n    selectors: [[\"\", \"noDataRowOutlet\", \"\"]]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NoDataRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[noDataRowOutlet]'\n    }]\n  }], () => [], null);\n})();\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE =\n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"/>\n  <ng-content select=\"colgroup, col\"/>\n\n  <!--\n    Unprojected content throws a hydration error so we need this to capture it.\n    It gets removed on the client so it doesn't affect the layout.\n  -->\n  @if (_isServer) {\n    <ng-content/>\n  }\n\n  @if (_isNativeHtmlTable) {\n    <thead role=\"rowgroup\">\n      <ng-container headerRowOutlet/>\n    </thead>\n    <tbody role=\"rowgroup\">\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n    </tbody>\n    <tfoot role=\"rowgroup\">\n      <ng-container footerRowOutlet/>\n    </tfoot>\n  } @else {\n    <ng-container headerRowOutlet/>\n    <ng-container rowOutlet/>\n    <ng-container noDataRowOutlet/>\n    <ng-container footerRowOutlet/>\n  }\n`;\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n  _differs = inject(IterableDiffers);\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  _elementRef = inject(ElementRef);\n  _dir = inject(Directionality, {\n    optional: true\n  });\n  _platform = inject(Platform);\n  _viewRepeater = inject(_VIEW_REPEATER_STRATEGY);\n  _coalescedStyleScheduler = inject(_COALESCED_STYLE_SCHEDULER);\n  _viewportRuler = inject(ViewportRuler);\n  _stickyPositioningListener = inject(STICKY_POSITIONING_LISTENER, {\n    optional: true,\n    skipSelf: true\n  });\n  _document = inject(DOCUMENT);\n  /** Latest data provided by the data source. */\n  _data;\n  /** Subject that emits when the component has been destroyed. */\n  _onDestroy = new Subject();\n  /** List of the rendered rows as identified by their `RenderRow` object. */\n  _renderRows;\n  /** Subscription that listens for the data provided by the data source. */\n  _renderChangeSubscription;\n  /**\n   * Map of all the user's defined columns (header, data, and footer cell template) identified by\n   * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n   * any custom column definitions added to `_customColumnDefs`.\n   */\n  _columnDefsByName = new Map();\n  /**\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n   * using `ContentChildren` as well as any custom row definitions added to `_customRowDefs`.\n   */\n  _rowDefs;\n  /**\n   * Set of all header row definitions that can be used by this table. Populated by the rows\n   * gathered by using `ContentChildren` as well as any custom row definitions added to\n   * `_customHeaderRowDefs`.\n   */\n  _headerRowDefs;\n  /**\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n   * using `ContentChildren` as well as any custom row definitions added to\n   * `_customFooterRowDefs`.\n   */\n  _footerRowDefs;\n  /** Differ used to find the changes in the data provided by the data source. */\n  _dataDiffer;\n  /** Stores the row definition that does not have a when predicate. */\n  _defaultRowDef;\n  /**\n   * Column definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n   * column definitions as *its* content child.\n   */\n  _customColumnDefs = new Set();\n  /**\n   * Data row definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n   * built-in data rows as *its* content child.\n   */\n  _customRowDefs = new Set();\n  /**\n   * Header row definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n   * built-in header rows as *its* content child.\n   */\n  _customHeaderRowDefs = new Set();\n  /**\n   * Footer row definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n   * built-in footer row as *its* content child.\n   */\n  _customFooterRowDefs = new Set();\n  /** No data row that was defined outside of the direct content children of the table. */\n  _customNoDataRow;\n  /**\n   * Whether the header row definition has been changed. Triggers an update to the header row after\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\n   */\n  _headerRowDefChanged = true;\n  /**\n   * Whether the footer row definition has been changed. Triggers an update to the footer row after\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\n   */\n  _footerRowDefChanged = true;\n  /**\n   * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n   * change.\n   */\n  _stickyColumnStylesNeedReset = true;\n  /**\n   * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n   * `false`, cached values will be used instead. This is only applicable to tables with\n   * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n   */\n  _forceRecalculateCellWidths = true;\n  /**\n   * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n   * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n   * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n   * and row template matches, which allows the `IterableDiffer` to check rows by reference\n   * and understand which rows are added/moved/removed.\n   *\n   * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n   * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n   * contains an array of created pairs. The array is necessary to handle cases where the data\n   * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n   * stored.\n   */\n  _cachedRenderRowsMap = new Map();\n  /** Whether the table is applied to a native `<table>`. */\n  _isNativeHtmlTable;\n  /**\n   * Utility class that is responsible for applying the appropriate sticky positioning styles to\n   * the table's rows and cells.\n   */\n  _stickyStyler;\n  /**\n   * CSS class added to any row or cell that has sticky positioning applied. May be overridden by\n   * table subclasses.\n   */\n  stickyCssClass = 'cdk-table-sticky';\n  /**\n   * Whether to manually add position: sticky to all sticky cell elements. Not needed if\n   * the position is set in a selector associated with the value of stickyCssClass. May be\n   * overridden by table subclasses\n   */\n  needsPositionStickyOnElement = true;\n  /** Whether the component is being rendered on the server. */\n  _isServer;\n  /** Whether the no data row is currently showing anything. */\n  _isShowingNoDataRow = false;\n  /** Whether the table has rendered out all the outlets for the first time. */\n  _hasAllOutlets = false;\n  /** Whether the table is done initializing. */\n  _hasInitialized = false;\n  /** Aria role to apply to the table's cells based on the table's own role. */\n  _getCellRole() {\n    // Perform this lazily in case the table's role was updated by a directive after construction.\n    if (this._cellRoleInternal === undefined) {\n      // Note that we set `role=\"cell\"` even on native `td` elements,\n      // because some browsers seem to require it. See #29784.\n      const tableRole = this._elementRef.nativeElement.getAttribute('role');\n      return tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n    }\n    return this._cellRoleInternal;\n  }\n  _cellRoleInternal = undefined;\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n   * relative to the function to know if a row should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   */\n  get trackBy() {\n    return this._trackByFn;\n  }\n  set trackBy(fn) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n      console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n    }\n    this._trackByFn = fn;\n  }\n  _trackByFn;\n  /**\n   * The table's source of data, which can be provided in three ways (in order of complexity):\n   *   - Simple data array (each object represents one table row)\n   *   - Stream that emits a data array each time the array changes\n   *   - `DataSource` object that implements the connect/disconnect interface.\n   *\n   * If a data array is provided, the table must be notified when the array's objects are\n   * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n   * render the diff since the last table render. If the data array reference is changed, the table\n   * will automatically trigger an update to the rows.\n   *\n   * When providing an Observable stream, the table will trigger an update automatically when the\n   * stream emits a new array of data.\n   *\n   * Finally, when providing a `DataSource` object, the table will use the Observable stream\n   * provided by the connect function and trigger updates when that stream emits new data array\n   * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n   * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n   * subscriptions registered during the connect process).\n   */\n  get dataSource() {\n    return this._dataSource;\n  }\n  set dataSource(dataSource) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  _dataSource;\n  /**\n   * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n   * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n   * dataobject will render the first row that evaluates its when predicate to true, in the order\n   * defined in the table, or otherwise the default row which does not have a when predicate.\n   */\n  get multiTemplateDataRows() {\n    return this._multiTemplateDataRows;\n  }\n  set multiTemplateDataRows(value) {\n    this._multiTemplateDataRows = value;\n    // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n    // this setter will be invoked before the row outlet has been defined hence the null check.\n    if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n      this._forceRenderDataRows();\n      this.updateStickyColumnStyles();\n    }\n  }\n  _multiTemplateDataRows = false;\n  /**\n   * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n   * and optimize rendering sticky styles for native tables. No-op for flex tables.\n   */\n  get fixedLayout() {\n    return this._fixedLayout;\n  }\n  set fixedLayout(value) {\n    this._fixedLayout = value;\n    // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n    this._forceRecalculateCellWidths = true;\n    this._stickyColumnStylesNeedReset = true;\n  }\n  _fixedLayout = false;\n  /**\n   * Emits when the table completes rendering a set of data rows based on the latest data from the\n   * data source, even if the set of rows is empty.\n   */\n  contentChanged = new EventEmitter();\n  // TODO(andrewseguin): Remove max value as the end index\n  //   and instead calculate the view on init and scroll.\n  /**\n   * Stream containing the latest information on what rows are being displayed on screen.\n   * Can be used by the data source to as a heuristic of what data should be provided.\n   *\n   * @docs-private\n   */\n  viewChange = new BehaviorSubject({\n    start: 0,\n    end: Number.MAX_VALUE\n  });\n  // Outlets in the table's template where the header, data rows, and footer will be inserted.\n  _rowOutlet;\n  _headerRowOutlet;\n  _footerRowOutlet;\n  _noDataRowOutlet;\n  /**\n   * The column definitions provided by the user that contain what the header, data, and footer\n   * cells should render for each column.\n   */\n  _contentColumnDefs;\n  /** Set of data row definitions that were provided to the table as content children. */\n  _contentRowDefs;\n  /** Set of header row definitions that were provided to the table as content children. */\n  _contentHeaderRowDefs;\n  /** Set of footer row definitions that were provided to the table as content children. */\n  _contentFooterRowDefs;\n  /** Row definition that will only be rendered if there's no data in the table. */\n  _noDataRow;\n  _injector = inject(Injector);\n  constructor() {\n    const role = inject(new HostAttributeToken('role'), {\n      optional: true\n    });\n    if (!role) {\n      this._elementRef.nativeElement.setAttribute('role', 'table');\n    }\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n    // the user has provided a custom trackBy, return the result of that function as evaluated\n    // with the values of the `RenderRow`'s data and index.\n    this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n      return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n    });\n  }\n  ngOnInit() {\n    this._setupStickyStyler();\n    this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\n      this._forceRecalculateCellWidths = true;\n    });\n  }\n  ngAfterContentInit() {\n    this._hasInitialized = true;\n  }\n  ngAfterContentChecked() {\n    // Only start re-rendering in `ngAfterContentChecked` after the first render.\n    if (this._canRender()) {\n      this._render();\n    }\n  }\n  ngOnDestroy() {\n    this._stickyStyler?.destroy();\n    [this._rowOutlet?.viewContainer, this._headerRowOutlet?.viewContainer, this._footerRowOutlet?.viewContainer, this._cachedRenderRowsMap, this._customColumnDefs, this._customRowDefs, this._customHeaderRowDefs, this._customFooterRowDefs, this._columnDefsByName].forEach(def => {\n      def?.clear();\n    });\n    this._headerRowDefs = [];\n    this._footerRowDefs = [];\n    this._defaultRowDef = null;\n    this._onDestroy.next();\n    this._onDestroy.complete();\n    if (isDataSource(this.dataSource)) {\n      this.dataSource.disconnect(this);\n    }\n  }\n  /**\n   * Renders rows based on the table's latest set of data, which was either provided directly as an\n   * input or retrieved through an Observable stream (directly or from a DataSource).\n   * Checks for differences in the data since the last diff to perform only the necessary\n   * changes (add/remove/move rows).\n   *\n   * If the table's data source is a DataSource or Observable, this will be invoked automatically\n   * each time the provided Observable stream emits a new data array. Otherwise if your data is\n   * an array, this function will need to be called to render any changes.\n   */\n  renderRows() {\n    this._renderRows = this._getAllRenderRows();\n    const changes = this._dataDiffer.diff(this._renderRows);\n    if (!changes) {\n      this._updateNoDataRow();\n      this.contentChanged.next();\n      return;\n    }\n    const viewContainer = this._rowOutlet.viewContainer;\n    this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), record => record.item.data, change => {\n      if (change.operation === _ViewRepeaterOperation.INSERTED && change.context) {\n        this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n      }\n    });\n    // Update the meta context of a row's context data (index, count, first, last, ...)\n    this._updateRowIndexContext();\n    // Update rows that did not get added/removed/moved but may have had their identity changed,\n    // e.g. if trackBy matched data on some property but the actual data reference changed.\n    changes.forEachIdentityChange(record => {\n      const rowView = viewContainer.get(record.currentIndex);\n      rowView.context.$implicit = record.item.data;\n    });\n    this._updateNoDataRow();\n    this.contentChanged.next();\n    this.updateStickyColumnStyles();\n  }\n  /** Adds a column definition that was not included as part of the content children. */\n  addColumnDef(columnDef) {\n    this._customColumnDefs.add(columnDef);\n  }\n  /** Removes a column definition that was not included as part of the content children. */\n  removeColumnDef(columnDef) {\n    this._customColumnDefs.delete(columnDef);\n  }\n  /** Adds a row definition that was not included as part of the content children. */\n  addRowDef(rowDef) {\n    this._customRowDefs.add(rowDef);\n  }\n  /** Removes a row definition that was not included as part of the content children. */\n  removeRowDef(rowDef) {\n    this._customRowDefs.delete(rowDef);\n  }\n  /** Adds a header row definition that was not included as part of the content children. */\n  addHeaderRowDef(headerRowDef) {\n    this._customHeaderRowDefs.add(headerRowDef);\n    this._headerRowDefChanged = true;\n  }\n  /** Removes a header row definition that was not included as part of the content children. */\n  removeHeaderRowDef(headerRowDef) {\n    this._customHeaderRowDefs.delete(headerRowDef);\n    this._headerRowDefChanged = true;\n  }\n  /** Adds a footer row definition that was not included as part of the content children. */\n  addFooterRowDef(footerRowDef) {\n    this._customFooterRowDefs.add(footerRowDef);\n    this._footerRowDefChanged = true;\n  }\n  /** Removes a footer row definition that was not included as part of the content children. */\n  removeFooterRowDef(footerRowDef) {\n    this._customFooterRowDefs.delete(footerRowDef);\n    this._footerRowDefChanged = true;\n  }\n  /** Sets a no data row definition that was not included as a part of the content children. */\n  setNoDataRow(noDataRow) {\n    this._customNoDataRow = noDataRow;\n  }\n  /**\n   * Updates the header sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n   * automatically called when the header row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   */\n  updateStickyHeaderRowStyles() {\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n    // Hide the thead element if there are no header rows. This is necessary to satisfy\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n    // required child `row`.\n    if (this._isNativeHtmlTable) {\n      const thead = closestTableSection(this._headerRowOutlet, 'thead');\n      if (thead) {\n        thead.style.display = headerRows.length ? '' : 'none';\n      }\n    }\n    const stickyStates = this._headerRowDefs.map(def => def.sticky);\n    this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n    this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n    // Reset the dirty state of the sticky input change since it has been used.\n    this._headerRowDefs.forEach(def => def.resetStickyChanged());\n  }\n  /**\n   * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n   * automatically called when the footer row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   */\n  updateStickyFooterRowStyles() {\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\n    // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n    // required child `row`.\n    if (this._isNativeHtmlTable) {\n      const tfoot = closestTableSection(this._footerRowOutlet, 'tfoot');\n      if (tfoot) {\n        tfoot.style.display = footerRows.length ? '' : 'none';\n      }\n    }\n    const stickyStates = this._footerRowDefs.map(def => def.sticky);\n    this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n    this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n    this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n    // Reset the dirty state of the sticky input change since it has been used.\n    this._footerRowDefs.forEach(def => def.resetStickyChanged());\n  }\n  /**\n   * Updates the column sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the left and right. Then sticky styles are added for the left and right according\n   * to the column definitions for each cell in each row. This is automatically called when\n   * the data source provides a new set of data or when a column definition changes its sticky\n   * input. May be called manually for cases where the cell content changes outside of these events.\n   */\n  updateStickyColumnStyles() {\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n    const dataRows = this._getRenderedRows(this._rowOutlet);\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\n    // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n    // In a table using a fixed layout, row content won't affect column width, so sticky styles\n    // don't need to be cleared unless either the sticky column config changes or one of the row\n    // defs change.\n    if (this._isNativeHtmlTable && !this._fixedLayout || this._stickyColumnStylesNeedReset) {\n      // Clear the left and right positioning from all columns in the table across all rows since\n      // sticky columns span across all table sections (header, data, footer)\n      this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n      this._stickyColumnStylesNeedReset = false;\n    }\n    // Update the sticky styles for each header row depending on the def's sticky state\n    headerRows.forEach((headerRow, i) => {\n      this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n    });\n    // Update the sticky styles for each data row depending on its def's sticky state\n    this._rowDefs.forEach(rowDef => {\n      // Collect all the rows rendered with this row definition.\n      const rows = [];\n      for (let i = 0; i < dataRows.length; i++) {\n        if (this._renderRows[i].rowDef === rowDef) {\n          rows.push(dataRows[i]);\n        }\n      }\n      this._addStickyColumnStyles(rows, rowDef);\n    });\n    // Update the sticky styles for each footer row depending on the def's sticky state\n    footerRows.forEach((footerRow, i) => {\n      this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n    });\n    // Reset the dirty state of the sticky input change since it has been used.\n    Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n  }\n  /** Invoked whenever an outlet is created and has been assigned to the table. */\n  _outletAssigned() {\n    // Trigger the first render once all outlets have been assigned. We do it this way, as\n    // opposed to waiting for the next `ngAfterContentChecked`, because we don't know when\n    // the next change detection will happen.\n    // Also we can't use queries to resolve the outlets, because they're wrapped in a\n    // conditional, so we have to rely on them being assigned via DI.\n    if (!this._hasAllOutlets && this._rowOutlet && this._headerRowOutlet && this._footerRowOutlet && this._noDataRowOutlet) {\n      this._hasAllOutlets = true;\n      // In some setups this may fire before `ngAfterContentInit`\n      // so we need a check here. See #28538.\n      if (this._canRender()) {\n        this._render();\n      }\n    }\n  }\n  /** Whether the table has all the information to start rendering. */\n  _canRender() {\n    return this._hasAllOutlets && this._hasInitialized;\n  }\n  /** Renders the table if its state has changed. */\n  _render() {\n    // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n    this._cacheRowDefs();\n    this._cacheColumnDefs();\n    // Make sure that the user has at least added header, footer, or data row def.\n    if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableMissingRowDefsError();\n    }\n    // Render updates if the list of columns have been changed for the header, row, or footer defs.\n    const columnsChanged = this._renderUpdatedColumns();\n    const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n    // Ensure sticky column styles are reset if set to `true` elsewhere.\n    this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n    this._forceRecalculateCellWidths = rowDefsChanged;\n    // If the header row definition has been changed, trigger a render to the header row.\n    if (this._headerRowDefChanged) {\n      this._forceRenderHeaderRows();\n      this._headerRowDefChanged = false;\n    }\n    // If the footer row definition has been changed, trigger a render to the footer row.\n    if (this._footerRowDefChanged) {\n      this._forceRenderFooterRows();\n      this._footerRowDefChanged = false;\n    }\n    // If there is a data source and row definitions, connect to the data source unless a\n    // connection has already been made.\n    if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n      this._observeRenderChanges();\n    } else if (this._stickyColumnStylesNeedReset) {\n      // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n      // called when it row data arrives. Otherwise, we need to call it proactively.\n      this.updateStickyColumnStyles();\n    }\n    this._checkStickyStates();\n  }\n  /**\n   * Get the list of RenderRow objects to render according to the current list of data and defined\n   * row definitions. If the previous list already contained a particular pair, it should be reused\n   * so that the differ equates their references.\n   */\n  _getAllRenderRows() {\n    const renderRows = [];\n    // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n    // new cache while unused ones can be picked up by garbage collection.\n    const prevCachedRenderRows = this._cachedRenderRowsMap;\n    this._cachedRenderRowsMap = new Map();\n    if (!this._data) {\n      return renderRows;\n    }\n    // For each data object, get the list of rows that should be rendered, represented by the\n    // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n    for (let i = 0; i < this._data.length; i++) {\n      let data = this._data[i];\n      const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n      if (!this._cachedRenderRowsMap.has(data)) {\n        this._cachedRenderRowsMap.set(data, new WeakMap());\n      }\n      for (let j = 0; j < renderRowsForData.length; j++) {\n        let renderRow = renderRowsForData[j];\n        const cache = this._cachedRenderRowsMap.get(renderRow.data);\n        if (cache.has(renderRow.rowDef)) {\n          cache.get(renderRow.rowDef).push(renderRow);\n        } else {\n          cache.set(renderRow.rowDef, [renderRow]);\n        }\n        renderRows.push(renderRow);\n      }\n    }\n    return renderRows;\n  }\n  /**\n   * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n   * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n   * `(T, CdkRowDef)` pair.\n   */\n  _getRenderRowsForData(data, dataIndex, cache) {\n    const rowDefs = this._getRowDefs(data, dataIndex);\n    return rowDefs.map(rowDef => {\n      const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n      if (cachedRenderRows.length) {\n        const dataRow = cachedRenderRows.shift();\n        dataRow.dataIndex = dataIndex;\n        return dataRow;\n      } else {\n        return {\n          data,\n          rowDef,\n          dataIndex\n        };\n      }\n    });\n  }\n  /** Update the map containing the content's column definitions. */\n  _cacheColumnDefs() {\n    this._columnDefsByName.clear();\n    const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n    columnDefs.forEach(columnDef => {\n      if (this._columnDefsByName.has(columnDef.name) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableDuplicateColumnNameError(columnDef.name);\n      }\n      this._columnDefsByName.set(columnDef.name, columnDef);\n    });\n  }\n  /** Update the list of all available row definitions that can be used. */\n  _cacheRowDefs() {\n    this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n    this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n    this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n    // After all row definitions are determined, find the row definition to be considered default.\n    const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n    if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableMultipleDefaultRowDefsError();\n    }\n    this._defaultRowDef = defaultRowDefs[0];\n  }\n  /**\n   * Check if the header, data, or footer rows have changed what columns they want to display or\n   * whether the sticky states have changed for the header or footer. If there is a diff, then\n   * re-render that section.\n   */\n  _renderUpdatedColumns() {\n    const columnsDiffReducer = (acc, def) => {\n      // The differ should be run for every column, even if `acc` is already\n      // true (see #29922)\n      const diff = !!def.getColumnsDiff();\n      return acc || diff;\n    };\n    // Force re-render data rows if the list of column definitions have changed.\n    const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n    if (dataColumnsChanged) {\n      this._forceRenderDataRows();\n    }\n    // Force re-render header/footer rows if the list of column definitions have changed.\n    const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n    if (headerColumnsChanged) {\n      this._forceRenderHeaderRows();\n    }\n    const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n    if (footerColumnsChanged) {\n      this._forceRenderFooterRows();\n    }\n    return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n  }\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the row outlet. Otherwise start listening for new data.\n   */\n  _switchDataSource(dataSource) {\n    this._data = [];\n    if (isDataSource(this.dataSource)) {\n      this.dataSource.disconnect(this);\n    }\n    // Stop listening for data from the previous data source.\n    if (this._renderChangeSubscription) {\n      this._renderChangeSubscription.unsubscribe();\n      this._renderChangeSubscription = null;\n    }\n    if (!dataSource) {\n      if (this._dataDiffer) {\n        this._dataDiffer.diff([]);\n      }\n      if (this._rowOutlet) {\n        this._rowOutlet.viewContainer.clear();\n      }\n    }\n    this._dataSource = dataSource;\n  }\n  /** Set up a subscription for the data provided by the data source. */\n  _observeRenderChanges() {\n    // If no data source has been set, there is nothing to observe for changes.\n    if (!this.dataSource) {\n      return;\n    }\n    let dataStream;\n    if (isDataSource(this.dataSource)) {\n      dataStream = this.dataSource.connect(this);\n    } else if (isObservable(this.dataSource)) {\n      dataStream = this.dataSource;\n    } else if (Array.isArray(this.dataSource)) {\n      dataStream = of(this.dataSource);\n    }\n    if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableUnknownDataSourceError();\n    }\n    this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(data => {\n      this._data = data || [];\n      this.renderRows();\n    });\n  }\n  /**\n   * Clears any existing content in the header row outlet and creates a new embedded view\n   * in the outlet using the header row definition.\n   */\n  _forceRenderHeaderRows() {\n    // Clear the header row outlet if any content exists.\n    if (this._headerRowOutlet.viewContainer.length > 0) {\n      this._headerRowOutlet.viewContainer.clear();\n    }\n    this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n    this.updateStickyHeaderRowStyles();\n  }\n  /**\n   * Clears any existing content in the footer row outlet and creates a new embedded view\n   * in the outlet using the footer row definition.\n   */\n  _forceRenderFooterRows() {\n    // Clear the footer row outlet if any content exists.\n    if (this._footerRowOutlet.viewContainer.length > 0) {\n      this._footerRowOutlet.viewContainer.clear();\n    }\n    this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n    this.updateStickyFooterRowStyles();\n  }\n  /** Adds the sticky column styles for the rows according to the columns' stick states. */\n  _addStickyColumnStyles(rows, rowDef) {\n    const columnDefs = Array.from(rowDef?.columns || []).map(columnName => {\n      const columnDef = this._columnDefsByName.get(columnName);\n      if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableUnknownColumnError(columnName);\n      }\n      return columnDef;\n    });\n    const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n    const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n    this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n  }\n  /** Gets the list of rows that have been rendered in the row outlet. */\n  _getRenderedRows(rowOutlet) {\n    const renderedRows = [];\n    for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n      const viewRef = rowOutlet.viewContainer.get(i);\n      renderedRows.push(viewRef.rootNodes[0]);\n    }\n    return renderedRows;\n  }\n  /**\n   * Get the matching row definitions that should be used for this row data. If there is only\n   * one row definition, it is returned. Otherwise, find the row definitions that has a when\n   * predicate that returns true with the data. If none return true, return the default row\n   * definition.\n   */\n  _getRowDefs(data, dataIndex) {\n    if (this._rowDefs.length == 1) {\n      return [this._rowDefs[0]];\n    }\n    let rowDefs = [];\n    if (this.multiTemplateDataRows) {\n      rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n    } else {\n      let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n      if (rowDef) {\n        rowDefs.push(rowDef);\n      }\n    }\n    if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableMissingMatchingRowDefError(data);\n    }\n    return rowDefs;\n  }\n  _getEmbeddedViewArgs(renderRow, index) {\n    const rowDef = renderRow.rowDef;\n    const context = {\n      $implicit: renderRow.data\n    };\n    return {\n      templateRef: rowDef.template,\n      context,\n      index\n    };\n  }\n  /**\n   * Creates a new row template in the outlet and fills it with the set of cell templates.\n   * Optionally takes a context to provide to the row and cells, as well as an optional index\n   * of where to place the new row template in the outlet.\n   */\n  _renderRow(outlet, rowDef, index, context = {}) {\n    // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n    const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n    this._renderCellTemplateForItem(rowDef, context);\n    return view;\n  }\n  _renderCellTemplateForItem(rowDef, context) {\n    for (let cellTemplate of this._getCellTemplates(rowDef)) {\n      if (CdkCellOutlet.mostRecentCellOutlet) {\n        CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Updates the index-related context for each row to reflect any changes in the index of the rows,\n   * e.g. first/last/even/odd.\n   */\n  _updateRowIndexContext() {\n    const viewContainer = this._rowOutlet.viewContainer;\n    for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n      const viewRef = viewContainer.get(renderIndex);\n      const context = viewRef.context;\n      context.count = count;\n      context.first = renderIndex === 0;\n      context.last = renderIndex === count - 1;\n      context.even = renderIndex % 2 === 0;\n      context.odd = !context.even;\n      if (this.multiTemplateDataRows) {\n        context.dataIndex = this._renderRows[renderIndex].dataIndex;\n        context.renderIndex = renderIndex;\n      } else {\n        context.index = this._renderRows[renderIndex].dataIndex;\n      }\n    }\n  }\n  /** Gets the column definitions for the provided row def. */\n  _getCellTemplates(rowDef) {\n    if (!rowDef || !rowDef.columns) {\n      return [];\n    }\n    return Array.from(rowDef.columns, columnId => {\n      const column = this._columnDefsByName.get(columnId);\n      if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableUnknownColumnError(columnId);\n      }\n      return rowDef.extractCellTemplate(column);\n    });\n  }\n  /**\n   * Forces a re-render of the data rows. Should be called in cases where there has been an input\n   * change that affects the evaluation of which rows should be rendered, e.g. toggling\n   * `multiTemplateDataRows` or adding/removing row definitions.\n   */\n  _forceRenderDataRows() {\n    this._dataDiffer.diff([]);\n    this._rowOutlet.viewContainer.clear();\n    this.renderRows();\n  }\n  /**\n   * Checks if there has been a change in sticky states since last check and applies the correct\n   * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n   * during a change detection and after the inputs are settled (after content check).\n   */\n  _checkStickyStates() {\n    const stickyCheckReducer = (acc, d) => {\n      return acc || d.hasStickyChanged();\n    };\n    // Note that the check needs to occur for every definition since it notifies the definition\n    // that it can reset its dirty state. Using another operator like `some` may short-circuit\n    // remaining definitions and leave them in an unchecked state.\n    if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyHeaderRowStyles();\n    }\n    if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyFooterRowStyles();\n    }\n    if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n      this._stickyColumnStylesNeedReset = true;\n      this.updateStickyColumnStyles();\n    }\n  }\n  /**\n   * Creates the sticky styler that will be used for sticky rows and columns. Listens\n   * for directionality changes and provides the latest direction to the styler. Re-applies column\n   * stickiness when directionality changes.\n   */\n  _setupStickyStyler() {\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener, this._injector);\n    (this._dir ? this._dir.change : of()).pipe(takeUntil(this._onDestroy)).subscribe(value => {\n      this._stickyStyler.direction = value;\n      this.updateStickyColumnStyles();\n    });\n  }\n  /** Filters definitions that belong to this table from a QueryList. */\n  _getOwnDefs(items) {\n    return items.filter(item => !item._table || item._table === this);\n  }\n  /** Creates or removes the no data row, depending on whether any data is being shown. */\n  _updateNoDataRow() {\n    const noDataRow = this._customNoDataRow || this._noDataRow;\n    if (!noDataRow) {\n      return;\n    }\n    const shouldShow = this._rowOutlet.viewContainer.length === 0;\n    if (shouldShow === this._isShowingNoDataRow) {\n      return;\n    }\n    const container = this._noDataRowOutlet.viewContainer;\n    if (shouldShow) {\n      const view = container.createEmbeddedView(noDataRow.templateRef);\n      const rootNode = view.rootNodes[0];\n      // Only add the attributes if we have a single root node since it's hard\n      // to figure out which one to add it to when there are multiple.\n      if (view.rootNodes.length === 1 && rootNode?.nodeType === this._document.ELEMENT_NODE) {\n        rootNode.setAttribute('role', 'row');\n        rootNode.classList.add(noDataRow._contentClassName);\n      }\n    } else {\n      container.clear();\n    }\n    this._isShowingNoDataRow = shouldShow;\n    this._changeDetectorRef.markForCheck();\n  }\n  static ɵfac = function CdkTable_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkTable)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CdkTable,\n    selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]],\n    contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, CdkNoDataRow, 5);\n        i0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 5);\n        i0.ɵɵcontentQuery(dirIndex, CdkRowDef, 5);\n        i0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 5);\n        i0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._noDataRow = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n      }\n    },\n    hostAttrs: [1, \"cdk-table\"],\n    hostVars: 2,\n    hostBindings: function CdkTable_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"cdk-table-fixed-layout\", ctx.fixedLayout);\n      }\n    },\n    inputs: {\n      trackBy: \"trackBy\",\n      dataSource: \"dataSource\",\n      multiTemplateDataRows: [2, \"multiTemplateDataRows\", \"multiTemplateDataRows\", booleanAttribute],\n      fixedLayout: [2, \"fixedLayout\", \"fixedLayout\", booleanAttribute]\n    },\n    outputs: {\n      contentChanged: \"contentChanged\"\n    },\n    exportAs: [\"cdkTable\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CDK_TABLE,\n      useExisting: CdkTable\n    }, {\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _DisposeViewRepeaterStrategy\n    }, {\n      provide: _COALESCED_STYLE_SCHEDULER,\n      useClass: _CoalescedStyleScheduler\n    },\n    // Prevent nested tables from seeing this table's StickyPositioningListener.\n    {\n      provide: STICKY_POSITIONING_LISTENER,\n      useValue: null\n    }])],\n    ngContentSelectors: _c1,\n    decls: 5,\n    vars: 2,\n    consts: [[\"role\", \"rowgroup\"], [\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n    template: function CdkTable_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c0);\n        i0.ɵɵprojection(0);\n        i0.ɵɵprojection(1, 1);\n        i0.ɵɵtemplate(2, CdkTable_Conditional_2_Template, 1, 0)(3, CdkTable_Conditional_3_Template, 7, 0)(4, CdkTable_Conditional_4_Template, 4, 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵconditional(ctx._isServer ? 2 : -1);\n        i0.ɵɵadvance();\n        i0.ɵɵconditional(ctx._isNativeHtmlTable ? 3 : 4);\n      }\n    },\n    dependencies: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet],\n    styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTable, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-table, table[cdk-table]',\n      exportAs: 'cdkTable',\n      template: CDK_TABLE_TEMPLATE,\n      host: {\n        'class': 'cdk-table',\n        '[class.cdk-table-fixed-layout]': 'fixedLayout'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CDK_TABLE,\n        useExisting: CdkTable\n      }, {\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _DisposeViewRepeaterStrategy\n      }, {\n        provide: _COALESCED_STYLE_SCHEDULER,\n        useClass: _CoalescedStyleScheduler\n      },\n      // Prevent nested tables from seeing this table's StickyPositioningListener.\n      {\n        provide: STICKY_POSITIONING_LISTENER,\n        useValue: null\n      }],\n      imports: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet],\n      styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"]\n    }]\n  }], () => [], {\n    trackBy: [{\n      type: Input\n    }],\n    dataSource: [{\n      type: Input\n    }],\n    multiTemplateDataRows: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    fixedLayout: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    contentChanged: [{\n      type: Output\n    }],\n    _contentColumnDefs: [{\n      type: ContentChildren,\n      args: [CdkColumnDef, {\n        descendants: true\n      }]\n    }],\n    _contentRowDefs: [{\n      type: ContentChildren,\n      args: [CdkRowDef, {\n        descendants: true\n      }]\n    }],\n    _contentHeaderRowDefs: [{\n      type: ContentChildren,\n      args: [CdkHeaderRowDef, {\n        descendants: true\n      }]\n    }],\n    _contentFooterRowDefs: [{\n      type: ContentChildren,\n      args: [CdkFooterRowDef, {\n        descendants: true\n      }]\n    }],\n    _noDataRow: [{\n      type: ContentChild,\n      args: [CdkNoDataRow]\n    }]\n  });\n})();\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n  return array.concat(Array.from(set));\n}\n/**\n * Finds the closest table section to an outlet. We can't use `HTMLElement.closest` for this,\n * because the node representing the outlet is a comment.\n */\nfunction closestTableSection(outlet, section) {\n  const uppercaseSection = section.toUpperCase();\n  let current = outlet.viewContainer.element.nativeElement;\n  while (current) {\n    // 1 is an element node.\n    const nodeName = current.nodeType === 1 ? current.nodeName : null;\n    if (nodeName === uppercaseSection) {\n      return current;\n    } else if (nodeName === 'TABLE') {\n      // Stop traversing past the `table` node.\n      break;\n    }\n    current = current.parentNode;\n  }\n  return null;\n}\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n  _table = inject(CdkTable, {\n    optional: true\n  });\n  _options = inject(TEXT_COLUMN_OPTIONS, {\n    optional: true\n  });\n  /** Column name that should be used to reference this column. */\n  get name() {\n    return this._name;\n  }\n  set name(name) {\n    this._name = name;\n    // With Ivy, inputs can be initialized before static query results are\n    // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n    this._syncColumnDefName();\n  }\n  _name;\n  /**\n   * Text label that should be used for the column header. If this property is not\n   * set, the header text will default to the column name with its first letter capitalized.\n   */\n  headerText;\n  /**\n   * Accessor function to retrieve the data rendered for each cell. If this\n   * property is not set, the data cells will render the value found in the data's property matching\n   * the column's name. For example, if the column is named `id`, then the rendered value will be\n   * value defined by the data's `id` property.\n   */\n  dataAccessor;\n  /** Alignment of the cell values. */\n  justify = 'start';\n  /** @docs-private */\n  columnDef;\n  /**\n   * The column cell is provided to the column during `ngOnInit` with a static query.\n   * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n   * column definition was provided in the same view as the table, which is not the case with this\n   * component.\n   * @docs-private\n   */\n  cell;\n  /**\n   * The column headerCell is provided to the column during `ngOnInit` with a static query.\n   * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n   * column definition was provided in the same view as the table, which is not the case with this\n   * component.\n   * @docs-private\n   */\n  headerCell;\n  constructor() {\n    this._options = this._options || {};\n  }\n  ngOnInit() {\n    this._syncColumnDefName();\n    if (this.headerText === undefined) {\n      this.headerText = this._createDefaultHeaderText();\n    }\n    if (!this.dataAccessor) {\n      this.dataAccessor = this._options.defaultDataAccessor || ((data, name) => data[name]);\n    }\n    if (this._table) {\n      // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n      // since the columnDef will not pick up its content by the time the table finishes checking\n      // its content and initializing the rows.\n      this.columnDef.cell = this.cell;\n      this.columnDef.headerCell = this.headerCell;\n      this._table.addColumnDef(this.columnDef);\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getTableTextColumnMissingParentTableError();\n    }\n  }\n  ngOnDestroy() {\n    if (this._table) {\n      this._table.removeColumnDef(this.columnDef);\n    }\n  }\n  /**\n   * Creates a default header text. Use the options' header text transformation function if one\n   * has been provided. Otherwise simply capitalize the column name.\n   */\n  _createDefaultHeaderText() {\n    const name = this.name;\n    if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableTextColumnMissingNameError();\n    }\n    if (this._options && this._options.defaultHeaderTextTransform) {\n      return this._options.defaultHeaderTextTransform(name);\n    }\n    return name[0].toUpperCase() + name.slice(1);\n  }\n  /** Synchronizes the column definition name with the text column name. */\n  _syncColumnDefName() {\n    if (this.columnDef) {\n      this.columnDef.name = this.name;\n    }\n  }\n  static ɵfac = function CdkTextColumn_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkTextColumn)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CdkTextColumn,\n    selectors: [[\"cdk-text-column\"]],\n    viewQuery: function CdkTextColumn_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(CdkColumnDef, 7);\n        i0.ɵɵviewQuery(CdkCellDef, 7);\n        i0.ɵɵviewQuery(CdkHeaderCellDef, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n      }\n    },\n    inputs: {\n      name: \"name\",\n      headerText: \"headerText\",\n      dataAccessor: \"dataAccessor\",\n      justify: \"justify\"\n    },\n    decls: 3,\n    vars: 0,\n    consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]],\n    template: function CdkTextColumn_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainerStart(0, 0);\n        i0.ɵɵtemplate(1, CdkTextColumn_th_1_Template, 2, 3, \"th\", 1)(2, CdkTextColumn_td_2_Template, 2, 3, \"td\", 2);\n        i0.ɵɵelementContainerEnd();\n      }\n    },\n    dependencies: [CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCellDef, CdkCell],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTextColumn, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-text-column',\n      template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      // Change detection is intentionally not set to OnPush. This component's template will be provided\n      // to the table to be inserted into its view. This is problematic when change detection runs since\n      // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n      // mean's the template in the table's view will not have the updated value (and in fact will cause\n      // an ExpressionChangedAfterItHasBeenCheckedError).\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      imports: [CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCellDef, CdkCell]\n    }]\n  }], () => [], {\n    name: [{\n      type: Input\n    }],\n    headerText: [{\n      type: Input\n    }],\n    dataAccessor: [{\n      type: Input\n    }],\n    justify: [{\n      type: Input\n    }],\n    columnDef: [{\n      type: ViewChild,\n      args: [CdkColumnDef, {\n        static: true\n      }]\n    }],\n    cell: [{\n      type: ViewChild,\n      args: [CdkCellDef, {\n        static: true\n      }]\n    }],\n    headerCell: [{\n      type: ViewChild,\n      args: [CdkHeaderCellDef, {\n        static: true\n      }]\n    }]\n  });\n})();\nconst EXPORTED_DECLARATIONS = [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, CdkRecycleRows, NoDataRowOutlet];\nclass CdkTableModule {\n  static ɵfac = function CdkTableModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkTableModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CdkTableModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [ScrollingModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTableModule, [{\n    type: NgModule,\n    args: [{\n      exports: EXPORTED_DECLARATIONS,\n      imports: [ScrollingModule, ...EXPORTED_DECLARATIONS]\n    }]\n  }], null, null);\n})();\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n * @deprecated Implement the `CanStick` interface instead.\n * @breaking-change 19.0.0\n */\nfunction mixinHasStickyInput(base) {\n  return class extends base {\n    /** Whether sticky positioning should be applied. */\n    get sticky() {\n      return this._sticky;\n    }\n    set sticky(v) {\n      const prevValue = this._sticky;\n      this._sticky = coerceBooleanProperty(v);\n      this._hasStickyChanged = prevValue !== this._sticky;\n    }\n    _sticky = false;\n    /** Whether the sticky input has changed since it was last checked. */\n    _hasStickyChanged = false;\n    /** Whether the sticky value has changed since this was last called. */\n    hasStickyChanged() {\n      const hasStickyChanged = this._hasStickyChanged;\n      this._hasStickyChanged = false;\n      return hasStickyChanged;\n    }\n    /** Resets the dirty check for cases where the sticky state has been used without checking. */\n    resetStickyChanged() {\n      this._hasStickyChanged = false;\n    }\n    constructor(...args) {\n      super(...args);\n    }\n  };\n}\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };","map":{"version":3,"names":["i","isDataSource","_c0","_c1","CdkTable_Conditional_2_Template","rf","ctx","i0","ɵɵprojection","CdkTable_Conditional_3_Template","ɵɵelementStart","ɵɵelementContainer","ɵɵelementEnd","CdkTable_Conditional_4_Template","CdkTextColumn_th_1_Template","ɵɵtext","ctx_r0","ɵɵnextContext","ɵɵstyleProp","justify","ɵɵadvance","ɵɵtextInterpolate1","headerText","CdkTextColumn_td_2_Template","data_r2","$implicit","dataAccessor","name","D","DataSource","DOCUMENT","InjectionToken","inject","TemplateRef","Directive","booleanAttribute","Input","ContentChild","ElementRef","NgZone","Injectable","IterableDiffers","ViewContainerRef","Component","ChangeDetectionStrategy","ViewEncapsulation","afterNextRender","ChangeDetectorRef","EventEmitter","Injector","HostAttributeToken","Output","ContentChildren","ViewChild","NgModule","Subject","BehaviorSubject","isObservable","of","takeUntil","b","_VIEW_REPEATER_STRATEGY","_","_RecycleViewRepeaterStrategy","a","_ViewRepeaterOperation","_DisposeViewRepeaterStrategy","Directionality","P","Platform","ViewportRuler","ScrollingModule","c","coerceBooleanProperty","CDK_TABLE","TEXT_COLUMN_OPTIONS","CdkCellDef","template","constructor","ɵfac","CdkCellDef_Factory","__ngFactoryType__","ɵdir","ɵɵdefineDirective","type","selectors","ngDevMode","ɵsetClassMetadata","args","selector","CdkHeaderCellDef","CdkHeaderCellDef_Factory","CdkFooterCellDef","CdkFooterCellDef_Factory","CdkColumnDef","_table","optional","_hasStickyChanged","_name","_setNameInput","sticky","_sticky","value","stickyEnd","_stickyEnd","cell","headerCell","footerCell","cssClassFriendlyName","_columnCssClassName","hasStickyChanged","resetStickyChanged","_updateColumnCssClassName","replace","CdkColumnDef_Factory","contentQueries","CdkColumnDef_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","inputs","features","ɵɵProvidersFeature","provide","useExisting","providers","transform","BaseCdkCell","columnDef","elementRef","nativeElement","classList","add","CdkHeaderCell","CdkHeaderCell_Factory","hostAttrs","ɵɵInheritDefinitionFeature","host","CdkFooterCell","role","_getCellRole","setAttribute","CdkFooterCell_Factory","CdkCell","CdkCell_Factory","_Schedule","tasks","endTasks","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","_currentSchedule","_ngZone","schedule","task","_createScheduleIfNeeded","push","scheduleEnd","runOutsideAngular","queueMicrotask","length","_CoalescedStyleScheduler_Factory","ɵprov","ɵɵdefineInjectable","token","factory","CDK_ROW_TEMPLATE","BaseRowDef","_differs","columns","_columnsDiffer","ngOnChanges","changes","currentValue","find","create","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","BaseRowDef_Factory","ɵɵNgOnChangesFeature","CdkHeaderRowDef_Factory","alias","CdkFooterRowDef_Factory","CdkRowDef","when","CdkRowDef_Factory","CdkCellOutlet","_viewContainer","cells","context","mostRecentCellOutlet","ngOnDestroy","CdkCellOutlet_Factory","CdkHeaderRow","CdkHeaderRow_Factory","ɵcmp","ɵɵdefineComponent","decls","vars","consts","CdkHeaderRow_Template","dependencies","encapsulation","changeDetection","Default","None","imports","CdkFooterRow","CdkFooterRow_Factory","CdkFooterRow_Template","CdkRow","CdkRow_Factory","CdkRow_Template","CdkNoDataRow","templateRef","_contentClassName","CdkNoDataRow_Factory","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","direction","_coalescedStyleScheduler","_isBrowser","_needsPositionStickyOnElement","_positionListener","_tableInjector","_elemSizeCache","WeakMap","_resizeObserver","globalThis","ResizeObserver","entries","_updateCachedSizes","_updatedStickyColumnsParamsToReplay","_stickyColumnsReplayTimeout","_cachedCellWidths","_borderCellCss","_destroyed","clearStickyPositioning","rows","stickyDirections","includes","_removeFromStickyColumnReplayQueue","elementsToClear","row","nodeType","ELEMENT_NODE","Array","from","children","_afterNextRender","write","element","_removeStickyStyle","updateStickyColumns","stickyStartStates","stickyEndStates","recalculateCellWidths","replay","some","state","stickyColumnsUpdated","sizes","stickyEndColumnsUpdated","firstRow","numCells","isRtl","start","end","lastStickyStart","lastIndexOf","firstStickyEnd","indexOf","cellWidths","startPositions","endPositions","_updateStickyColumnReplayQueue","earlyRead","_getCellWidths","_getStickyStartColumnPositions","_getStickyEndColumnPositions","_addStickyStyle","w","slice","map","width","index","reverse","stickRows","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","height","_retrieveElementSize","borderedRowIndex","offset","isBorderedRowIndex","stickyHeaderRowsUpdated","offsets","elements","stickyFooterRowsUpdated","updateStickyFooterContainer","tableElement","tfoot","querySelector","destroy","clearTimeout","disconnect","contains","dir","style","remove","hasDirection","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","top","bottom","left","right","firstRowCells","widths","positions","nextPosition","cachedSize","get","clientRect","getBoundingClientRect","size","set","observe","box","params","rowsSet","Set","update","filter","has","needsColumnUpdate","entry","newEntry","borderBoxSize","inlineSize","blockSize","contentRect","target","isCell","setTimeout","spec","injector","klass","getTableUnknownColumnError","id","Error","getTableDuplicateColumnNameError","getTableMultipleDefaultRowDefsError","getTableMissingMatchingRowDefError","data","JSON","stringify","getTableMissingRowDefsError","getTableUnknownDataSourceError","getTableTextColumnMissingParentTableError","getTableTextColumnMissingNameError","STICKY_POSITIONING_LISTENER","CdkRecycleRows","CdkRecycleRows_Factory","useClass","DataRowOutlet","viewContainer","table","_rowOutlet","_outletAssigned","DataRowOutlet_Factory","HeaderRowOutlet","_headerRowOutlet","HeaderRowOutlet_Factory","FooterRowOutlet","_footerRowOutlet","FooterRowOutlet_Factory","NoDataRowOutlet","_noDataRowOutlet","NoDataRowOutlet_Factory","CDK_TABLE_TEMPLATE","CdkTable","_changeDetectorRef","_elementRef","_dir","_platform","_viewRepeater","_viewportRuler","_stickyPositioningListener","skipSelf","_document","_data","_onDestroy","_renderRows","_renderChangeSubscription","_columnDefsByName","Map","_rowDefs","_headerRowDefs","_footerRowDefs","_dataDiffer","_defaultRowDef","_customColumnDefs","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_customNoDataRow","_headerRowDefChanged","_footerRowDefChanged","_stickyColumnStylesNeedReset","_forceRecalculateCellWidths","_cachedRenderRowsMap","_stickyStyler","stickyCssClass","needsPositionStickyOnElement","_isServer","_isShowingNoDataRow","_hasAllOutlets","_hasInitialized","_cellRoleInternal","undefined","tableRole","getAttribute","trackBy","_trackByFn","fn","console","warn","dataSource","_dataSource","_switchDataSource","multiTemplateDataRows","_multiTemplateDataRows","_forceRenderDataRows","updateStickyColumnStyles","fixedLayout","_fixedLayout","contentChanged","viewChange","Number","MAX_VALUE","_contentColumnDefs","_contentRowDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_noDataRow","_injector","isBrowser","nodeName","_i","dataRow","dataIndex","ngOnInit","_setupStickyStyler","change","pipe","subscribe","ngAfterContentInit","ngAfterContentChecked","_canRender","_render","forEach","def","clear","next","complete","renderRows","_getAllRenderRows","_updateNoDataRow","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","item","operation","INSERTED","_renderCellTemplateForItem","rowDef","_updateRowIndexContext","forEachIdentityChange","rowView","addColumnDef","removeColumnDef","delete","addRowDef","removeRowDef","addHeaderRowDef","headerRowDef","removeHeaderRowDef","addFooterRowDef","footerRowDef","removeFooterRowDef","setNoDataRow","noDataRow","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","closestTableSection","display","updateStickyFooterRowStyles","footerRows","dataRows","headerRow","_addStickyColumnStyles","footerRow","values","_cacheRowDefs","_cacheColumnDefs","columnsChanged","_renderUpdatedColumns","rowDefsChanged","_forceRenderHeaderRows","_forceRenderFooterRows","_observeRenderChanges","_checkStickyStates","prevCachedRenderRows","renderRowsForData","_getRenderRowsForData","j","renderRow","cache","rowDefs","_getRowDefs","cachedRenderRows","shift","columnDefs","mergeArrayAndSet","_getOwnDefs","defaultRowDefs","columnsDiffReducer","acc","dataColumnsChanged","reduce","headerColumnsChanged","footerColumnsChanged","unsubscribe","dataStream","connect","isArray","_renderRow","columnName","rowOutlet","renderedRows","viewRef","rootNodes","outlet","view","createEmbeddedView","cellTemplate","_getCellTemplates","markForCheck","renderIndex","count","last","even","odd","columnId","stickyCheckReducer","d","items","shouldShow","container","rootNode","CdkTable_Factory","CdkTable_ContentQueries","hostVars","hostBindings","CdkTable_HostBindings","ɵɵclassProp","outputs","exportAs","useValue","ngContentSelectors","CdkTable_Template","ɵɵprojectionDef","ɵɵtemplate","ɵɵconditional","styles","descendants","array","concat","section","uppercaseSection","toUpperCase","current","parentNode","CdkTextColumn","_options","_syncColumnDefName","_createDefaultHeaderText","defaultDataAccessor","defaultHeaderTextTransform","CdkTextColumn_Factory","viewQuery","CdkTextColumn_Query","ɵɵviewQuery","CdkTextColumn_Template","ɵɵelementContainerStart","ɵɵelementContainerEnd","static","EXPORTED_DECLARATIONS","CdkTableModule","CdkTableModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports","mixinHasStickyInput","base","v","prevValue"],"sources":["C:/Users/gabri/OneDrive/Documentos/ProjetoWedsonFront/node_modules/@angular/cdk/fesm2022/table.mjs"],"sourcesContent":["import { i as isDataSource } from './data-source-D34wiQZj.mjs';\nexport { D as DataSource } from './data-source-D34wiQZj.mjs';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, TemplateRef, Directive, booleanAttribute, Input, ContentChild, ElementRef, NgZone, Injectable, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, afterNextRender, ChangeDetectorRef, EventEmitter, Injector, HostAttributeToken, Output, ContentChildren, ViewChild, NgModule } from '@angular/core';\nimport { Subject, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { b as _VIEW_REPEATER_STRATEGY, _ as _RecycleViewRepeaterStrategy, a as _ViewRepeaterOperation } from './recycle-view-repeater-strategy-DoWdPqVw.mjs';\nimport { _ as _DisposeViewRepeaterStrategy } from './dispose-view-repeater-strategy-D_JReLI1.mjs';\nimport { D as Directionality } from './directionality-CBXD4hga.mjs';\nimport { P as Platform } from './platform-DmdVEw_C.mjs';\nimport { ViewportRuler, ScrollingModule } from './scrolling.mjs';\nimport { c as coerceBooleanProperty } from './boolean-property-DaaVhX5A.mjs';\nimport './element-x4z00URv.mjs';\nimport './scrolling-BkvA05C8.mjs';\nimport './bidi.mjs';\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    /** @docs-private */\n    template = inject(TemplateRef);\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkCellDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: CdkCellDef, isStandalone: true, selector: \"[cdkCellDef]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCellDef]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    /** @docs-private */\n    template = inject(TemplateRef);\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkHeaderCellDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: CdkHeaderCellDef, isStandalone: true, selector: \"[cdkHeaderCellDef]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderCellDef]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    /** @docs-private */\n    template = inject(TemplateRef);\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkFooterCellDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: CdkFooterCellDef, isStandalone: true, selector: \"[cdkFooterCellDef]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterCellDef]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef {\n    _table = inject(CDK_TABLE, { optional: true });\n    _hasStickyChanged = false;\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    _name;\n    /** Whether the cell is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    _sticky = false;\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    set stickyEnd(value) {\n        if (value !== this._stickyEnd) {\n            this._stickyEnd = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    _stickyEnd = false;\n    /** @docs-private */\n    cell;\n    /** @docs-private */\n    headerCell;\n    /** @docs-private */\n    footerCell;\n    /**\n     * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n     * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n     * do not match are replaced by the '-' character.\n     */\n    cssClassFriendlyName;\n    /**\n     * Class name for cells in this column.\n     * @docs-private\n     */\n    _columnCssClassName;\n    constructor() { }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n        // If the directive is set without a name (updated programmatically), then this setter will\n        // trigger with an empty string and should not overwrite the programmatically set value.\n        if (value) {\n            this._name = value;\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n            this._updateColumnCssClassName();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkColumnDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.6\", type: CdkColumnDef, isStandalone: true, selector: \"[cdkColumnDef]\", inputs: { name: [\"cdkColumnDef\", \"name\"], sticky: [\"sticky\", \"sticky\", booleanAttribute], stickyEnd: [\"stickyEnd\", \"stickyEnd\", booleanAttribute] }, providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }], queries: [{ propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true }, { propertyName: \"footerCell\", first: true, predicate: CdkFooterCellDef, descendants: true }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkColumnDef]',\n                    providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { name: [{\n                type: Input,\n                args: ['cdkColumnDef']\n            }], sticky: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], stickyEnd: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], cell: [{\n                type: ContentChild,\n                args: [CdkCellDef]\n            }], headerCell: [{\n                type: ContentChild,\n                args: [CdkHeaderCellDef]\n            }], footerCell: [{\n                type: ContentChild,\n                args: [CdkFooterCellDef]\n            }] } });\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        elementRef.nativeElement.classList.add(...columnDef._columnCssClassName);\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n    constructor() {\n        super(inject(CdkColumnDef), inject(ElementRef));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkHeaderCell, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: CdkHeaderCell, isStandalone: true, selector: \"cdk-header-cell, th[cdk-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"cdk-header-cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-header-cell, th[cdk-header-cell]',\n                    host: {\n                        'class': 'cdk-header-cell',\n                        'role': 'columnheader',\n                    },\n                }]\n        }], ctorParameters: () => [] });\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n    constructor() {\n        const columnDef = inject(CdkColumnDef);\n        const elementRef = inject(ElementRef);\n        super(columnDef, elementRef);\n        const role = columnDef._table?._getCellRole();\n        if (role) {\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkFooterCell, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: CdkFooterCell, isStandalone: true, selector: \"cdk-footer-cell, td[cdk-footer-cell]\", host: { classAttribute: \"cdk-footer-cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                    host: {\n                        'class': 'cdk-footer-cell',\n                    },\n                }]\n        }], ctorParameters: () => [] });\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n    constructor() {\n        const columnDef = inject(CdkColumnDef);\n        const elementRef = inject(ElementRef);\n        super(columnDef, elementRef);\n        const role = columnDef._table?._getCellRole();\n        if (role) {\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkCell, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: CdkCell, isStandalone: true, selector: \"cdk-cell, td[cdk-cell]\", host: { classAttribute: \"cdk-cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-cell, td[cdk-cell]',\n                    host: {\n                        'class': 'cdk-cell',\n                    },\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * @docs-private\n */\nclass _Schedule {\n    tasks = [];\n    endTasks = [];\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n    _currentSchedule = null;\n    _ngZone = inject(NgZone);\n    constructor() { }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.endTasks.push(task);\n    }\n    _createScheduleIfNeeded() {\n        if (this._currentSchedule) {\n            return;\n        }\n        this._currentSchedule = new _Schedule();\n        this._ngZone.runOutsideAngular(() => \n        // TODO(mmalerba): Scheduling this using something that runs less frequently\n        //  (e.g. requestAnimationFrame, setTimeout, etc.) causes noticeable jank with the column\n        //  resizer. We should audit the usages of schedule / scheduleEnd in that component and see\n        //  if we can refactor it so that we don't need to flush the tasks quite so frequently.\n        queueMicrotask(() => {\n            while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n                const schedule = this._currentSchedule;\n                // Capture new tasks scheduled by the current set of tasks.\n                this._currentSchedule = new _Schedule();\n                for (const task of schedule.tasks) {\n                    task();\n                }\n                for (const task of schedule.endTasks) {\n                    task();\n                }\n            }\n            this._currentSchedule = null;\n        }));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: _CoalescedStyleScheduler, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: _CoalescedStyleScheduler });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: _CoalescedStyleScheduler, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [] });\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n    template = inject(TemplateRef);\n    _differs = inject(IterableDiffers);\n    /** The columns to be displayed on this row. */\n    columns;\n    /** Differ used to check if any changes were made to the columns. */\n    _columnsDiffer;\n    constructor() { }\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: BaseRowDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: BaseRowDef, isStandalone: true, usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: BaseRowDef, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [] });\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends BaseRowDef {\n    _table = inject(CDK_TABLE, { optional: true });\n    _hasStickyChanged = false;\n    /** Whether the row is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    _sticky = false;\n    constructor() {\n        super(inject(TemplateRef), inject(IterableDiffers));\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkHeaderRowDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.6\", type: CdkHeaderRowDef, isStandalone: true, selector: \"[cdkHeaderRowDef]\", inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\", booleanAttribute] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderRowDef]',\n                    inputs: [{ name: 'columns', alias: 'cdkHeaderRowDef' }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { sticky: [{\n                type: Input,\n                args: [{ alias: 'cdkHeaderRowDefSticky', transform: booleanAttribute }]\n            }] } });\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends BaseRowDef {\n    _table = inject(CDK_TABLE, { optional: true });\n    _hasStickyChanged = false;\n    /** Whether the row is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    _sticky = false;\n    constructor() {\n        super(inject(TemplateRef), inject(IterableDiffers));\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkFooterRowDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.6\", type: CdkFooterRowDef, isStandalone: true, selector: \"[cdkFooterRowDef]\", inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\", booleanAttribute] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterRowDef]',\n                    inputs: [{ name: 'columns', alias: 'cdkFooterRowDef' }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { sticky: [{\n                type: Input,\n                args: [{ alias: 'cdkFooterRowDefSticky', transform: booleanAttribute }]\n            }] } });\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n    _table = inject(CDK_TABLE, { optional: true });\n    /**\n     * Function that should return true if this row template should be used for the provided index\n     * and row data. If left undefined, this row will be considered the default row template to use\n     * when no other when functions return true for the data.\n     * For every row, there must be at least one when function that passes or an undefined to default.\n     */\n    when;\n    constructor() {\n        // TODO(andrewseguin): Add an input for providing a switch function to determine\n        //   if this template should be used.\n        super(inject(TemplateRef), inject(IterableDiffers));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkRowDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: CdkRowDef, isStandalone: true, selector: \"[cdkRowDef]\", inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkRowDef]',\n                    inputs: [\n                        { name: 'columns', alias: 'cdkRowDefColumns' },\n                        { name: 'when', alias: 'cdkRowDefWhen' },\n                    ],\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n    _viewContainer = inject(ViewContainerRef);\n    /** The ordered list of cells to render within this outlet's view container */\n    cells;\n    /** The data context to be provided to each cell */\n    context;\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     */\n    static mostRecentCellOutlet = null;\n    constructor() {\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkCellOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: CdkCellOutlet, isStandalone: true, selector: \"[cdkCellOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkCellOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCellOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkHeaderRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.6\", type: CdkHeaderRow, isStandalone: true, selector: \"cdk-header-row, tr[cdk-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-header-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-header-row, tr[cdk-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkFooterRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.6\", type: CdkFooterRow, isStandalone: true, selector: \"cdk-footer-row, tr[cdk-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-footer-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-footer-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.6\", type: CdkRow, isStandalone: true, selector: \"cdk-row, tr[cdk-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-row, tr[cdk-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n    templateRef = inject(TemplateRef);\n    _contentClassName = 'cdk-no-data-row';\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkNoDataRow, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: CdkNoDataRow, isStandalone: true, selector: \"ng-template[cdkNoDataRow]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkNoDataRow]',\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * Directions that can be used when setting sticky positioning.\n * @docs-private\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    _isNativeHtmlTable;\n    _stickCellCss;\n    direction;\n    _coalescedStyleScheduler;\n    _isBrowser;\n    _needsPositionStickyOnElement;\n    _positionListener;\n    _tableInjector;\n    _elemSizeCache = new WeakMap();\n    _resizeObserver = globalThis?.ResizeObserver\n        ? new globalThis.ResizeObserver(entries => this._updateCachedSizes(entries))\n        : null;\n    _updatedStickyColumnsParamsToReplay = [];\n    _stickyColumnsReplayTimeout = null;\n    _cachedCellWidths = [];\n    _borderCellCss;\n    _destroyed = false;\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n     *     using inline styles. If false, it is assumed that position: sticky is included in\n     *     the component stylesheet for _stickCellCss.\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\n     *     and their dimensions.\n     * @param _tableInjector The table's Injector.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener, _tableInjector) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._isBrowser = _isBrowser;\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n        this._positionListener = _positionListener;\n        this._tableInjector = _tableInjector;\n        this._borderCellCss = {\n            'top': `${_stickCellCss}-border-elem-top`,\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\n            'left': `${_stickCellCss}-border-elem-left`,\n            'right': `${_stickCellCss}-border-elem-right`,\n        };\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        if (stickyDirections.includes('left') || stickyDirections.includes('right')) {\n            this._removeFromStickyColumnReplayQueue(rows);\n        }\n        const elementsToClear = [];\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            elementsToClear.push(row, ...Array.from(row.children));\n        }\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n        this._afterNextRender({\n            write: () => {\n                for (const element of elementsToClear) {\n                    this._removeStickyStyle(element, stickyDirections);\n                }\n            },\n        });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     * @param replay Whether to enqueue this call for replay after a ResizeObserver update.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true, replay = true) {\n        // Don't cache any state if none of the columns are sticky.\n        if (!rows.length ||\n            !this._isBrowser ||\n            !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))) {\n            this._positionListener?.stickyColumnsUpdated({ sizes: [] });\n            this._positionListener?.stickyEndColumnsUpdated({ sizes: [] });\n            return;\n        }\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\n        const firstRow = rows[0];\n        const numCells = firstRow.children.length;\n        const isRtl = this.direction === 'rtl';\n        const start = isRtl ? 'right' : 'left';\n        const end = isRtl ? 'left' : 'right';\n        const lastStickyStart = stickyStartStates.lastIndexOf(true);\n        const firstStickyEnd = stickyEndStates.indexOf(true);\n        let cellWidths;\n        let startPositions;\n        let endPositions;\n        if (replay) {\n            this._updateStickyColumnReplayQueue({\n                rows: [...rows],\n                stickyStartStates: [...stickyStartStates],\n                stickyEndStates: [...stickyEndStates],\n            });\n        }\n        this._afterNextRender({\n            earlyRead: () => {\n                cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n                startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n                endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n            },\n            write: () => {\n                for (const row of rows) {\n                    for (let i = 0; i < numCells; i++) {\n                        const cell = row.children[i];\n                        if (stickyStartStates[i]) {\n                            this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n                        }\n                        if (stickyEndStates[i]) {\n                            this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n                        }\n                    }\n                }\n                if (this._positionListener && cellWidths.some(w => !!w)) {\n                    this._positionListener.stickyColumnsUpdated({\n                        sizes: lastStickyStart === -1\n                            ? []\n                            : cellWidths\n                                .slice(0, lastStickyStart + 1)\n                                .map((width, index) => (stickyStartStates[index] ? width : null)),\n                    });\n                    this._positionListener.stickyEndColumnsUpdated({\n                        sizes: firstStickyEnd === -1\n                            ? []\n                            : cellWidths\n                                .slice(firstStickyEnd)\n                                .map((width, index) => (stickyEndStates[index + firstStickyEnd] ? width : null))\n                                .reverse(),\n                    });\n                }\n            },\n        });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n        // sticky states need to be reversed as well.\n        const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n        const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n        // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n        const stickyOffsets = [];\n        const stickyCellHeights = [];\n        const elementsToStick = [];\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n        // (and potentially other changes like column resize).\n        this._afterNextRender({\n            earlyRead: () => {\n                for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n                    if (!states[rowIndex]) {\n                        continue;\n                    }\n                    stickyOffsets[rowIndex] = stickyOffset;\n                    const row = rows[rowIndex];\n                    elementsToStick[rowIndex] = this._isNativeHtmlTable\n                        ? Array.from(row.children)\n                        : [row];\n                    const height = this._retrieveElementSize(row).height;\n                    stickyOffset += height;\n                    stickyCellHeights[rowIndex] = height;\n                }\n            },\n            write: () => {\n                const borderedRowIndex = states.lastIndexOf(true);\n                for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                    if (!states[rowIndex]) {\n                        continue;\n                    }\n                    const offset = stickyOffsets[rowIndex];\n                    const isBorderedRowIndex = rowIndex === borderedRowIndex;\n                    for (const element of elementsToStick[rowIndex]) {\n                        this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n                    }\n                }\n                if (position === 'top') {\n                    this._positionListener?.stickyHeaderRowsUpdated({\n                        sizes: stickyCellHeights,\n                        offsets: stickyOffsets,\n                        elements: elementsToStick,\n                    });\n                }\n                else {\n                    this._positionListener?.stickyFooterRowsUpdated({\n                        sizes: stickyCellHeights,\n                        offsets: stickyOffsets,\n                        elements: elementsToStick,\n                    });\n                }\n            },\n        });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\n        this._afterNextRender({\n            write: () => {\n                const tfoot = tableElement.querySelector('tfoot');\n                if (tfoot) {\n                    if (stickyStates.some(state => !state)) {\n                        this._removeStickyStyle(tfoot, ['bottom']);\n                    }\n                    else {\n                        this._addStickyStyle(tfoot, 'bottom', 0, false);\n                    }\n                }\n            },\n        });\n    }\n    /** Triggered by the table's OnDestroy hook. */\n    destroy() {\n        if (this._stickyColumnsReplayTimeout) {\n            clearTimeout(this._stickyColumnsReplayTimeout);\n        }\n        this._resizeObserver?.disconnect();\n        this._destroyed = true;\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        if (!element.classList.contains(this._stickCellCss)) {\n            return;\n        }\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n            element.classList.remove(this._borderCellCss[dir]);\n        }\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n        if (hasDirection) {\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        }\n        else {\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\n            element.style.zIndex = '';\n            if (this._needsPositionStickyOnElement) {\n                element.style.position = '';\n            }\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\n        element.classList.add(this._stickCellCss);\n        if (isBorderElement) {\n            element.classList.add(this._borderCellCss[dir]);\n        }\n        element.style[dir] = `${dirValue}px`;\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        if (this._needsPositionStickyOnElement) {\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row, recalculateCellWidths = true) {\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\n            return this._cachedCellWidths;\n        }\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            const cell = firstRowCells[i];\n            cellWidths.push(this._retrieveElementSize(cell).width);\n        }\n        this._cachedCellWidths = cellWidths;\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Retreives the most recently observed size of the specified element from the cache, or\n     * meaures it directly if not yet cached.\n     */\n    _retrieveElementSize(element) {\n        const cachedSize = this._elemSizeCache.get(element);\n        if (cachedSize) {\n            return cachedSize;\n        }\n        const clientRect = element.getBoundingClientRect();\n        const size = { width: clientRect.width, height: clientRect.height };\n        if (!this._resizeObserver) {\n            return size;\n        }\n        this._elemSizeCache.set(element, size);\n        this._resizeObserver.observe(element, { box: 'border-box' });\n        return size;\n    }\n    /**\n     * Conditionally enqueue the requested sticky update and clear previously queued updates\n     * for the same rows.\n     */\n    _updateStickyColumnReplayQueue(params) {\n        this._removeFromStickyColumnReplayQueue(params.rows);\n        // No need to replay if a flush is pending.\n        if (!this._stickyColumnsReplayTimeout) {\n            this._updatedStickyColumnsParamsToReplay.push(params);\n        }\n    }\n    /** Remove updates for the specified rows from the queue. */\n    _removeFromStickyColumnReplayQueue(rows) {\n        const rowsSet = new Set(rows);\n        for (const update of this._updatedStickyColumnsParamsToReplay) {\n            update.rows = update.rows.filter(row => !rowsSet.has(row));\n        }\n        this._updatedStickyColumnsParamsToReplay = this._updatedStickyColumnsParamsToReplay.filter(update => !!update.rows.length);\n    }\n    /** Update _elemSizeCache with the observed sizes. */\n    _updateCachedSizes(entries) {\n        let needsColumnUpdate = false;\n        for (const entry of entries) {\n            const newEntry = entry.borderBoxSize?.length\n                ? {\n                    width: entry.borderBoxSize[0].inlineSize,\n                    height: entry.borderBoxSize[0].blockSize,\n                }\n                : {\n                    width: entry.contentRect.width,\n                    height: entry.contentRect.height,\n                };\n            if (newEntry.width !== this._elemSizeCache.get(entry.target)?.width &&\n                isCell(entry.target)) {\n                needsColumnUpdate = true;\n            }\n            this._elemSizeCache.set(entry.target, newEntry);\n        }\n        if (needsColumnUpdate && this._updatedStickyColumnsParamsToReplay.length) {\n            if (this._stickyColumnsReplayTimeout) {\n                clearTimeout(this._stickyColumnsReplayTimeout);\n            }\n            this._stickyColumnsReplayTimeout = setTimeout(() => {\n                if (this._destroyed) {\n                    return;\n                }\n                for (const update of this._updatedStickyColumnsParamsToReplay) {\n                    this.updateStickyColumns(update.rows, update.stickyStartStates, update.stickyEndStates, true, false);\n                }\n                this._updatedStickyColumnsParamsToReplay = [];\n                this._stickyColumnsReplayTimeout = null;\n            }, 0);\n        }\n    }\n    /**\n     * Invoke afterNextRender with the table's injector, falling back to CoalescedStyleScheduler\n     * if the injector was not provided.\n     */\n    _afterNextRender(spec) {\n        if (this._tableInjector) {\n            afterNextRender(spec, { injector: this._tableInjector });\n        }\n        else {\n            this._coalescedStyleScheduler.schedule(() => {\n                spec.earlyRead?.();\n                spec.write();\n            });\n        }\n    }\n}\nfunction isCell(element) {\n    return ['cdk-cell', 'cdk-header-cell', 'cdk-footer-cell'].some(klass => element.classList.contains(klass));\n}\n\n/**\n * Returns an error to be thrown when attempting to find an nonexistent column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass CdkRecycleRows {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: CdkRecycleRows, isStandalone: true, selector: \"cdk-table[recycleRows], table[cdk-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n    viewContainer = inject(ViewContainerRef);\n    elementRef = inject(ElementRef);\n    constructor() {\n        const table = inject(CDK_TABLE);\n        table._rowOutlet = this;\n        table._outletAssigned();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DataRowOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: DataRowOutlet, isStandalone: true, selector: \"[rowOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: DataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[rowOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n    viewContainer = inject(ViewContainerRef);\n    elementRef = inject(ElementRef);\n    constructor() {\n        const table = inject(CDK_TABLE);\n        table._headerRowOutlet = this;\n        table._outletAssigned();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: HeaderRowOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: HeaderRowOutlet, isStandalone: true, selector: \"[headerRowOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: HeaderRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[headerRowOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n    viewContainer = inject(ViewContainerRef);\n    elementRef = inject(ElementRef);\n    constructor() {\n        const table = inject(CDK_TABLE);\n        table._footerRowOutlet = this;\n        table._outletAssigned();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: FooterRowOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: FooterRowOutlet, isStandalone: true, selector: \"[footerRowOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: FooterRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[footerRowOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n    viewContainer = inject(ViewContainerRef);\n    elementRef = inject(ElementRef);\n    constructor() {\n        const table = inject(CDK_TABLE);\n        table._noDataRowOutlet = this;\n        table._outletAssigned();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: NoDataRowOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.6\", type: NoDataRowOutlet, isStandalone: true, selector: \"[noDataRowOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: NoDataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[noDataRowOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"/>\n  <ng-content select=\"colgroup, col\"/>\n\n  <!--\n    Unprojected content throws a hydration error so we need this to capture it.\n    It gets removed on the client so it doesn't affect the layout.\n  -->\n  @if (_isServer) {\n    <ng-content/>\n  }\n\n  @if (_isNativeHtmlTable) {\n    <thead role=\"rowgroup\">\n      <ng-container headerRowOutlet/>\n    </thead>\n    <tbody role=\"rowgroup\">\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n    </tbody>\n    <tfoot role=\"rowgroup\">\n      <ng-container footerRowOutlet/>\n    </tfoot>\n  } @else {\n    <ng-container headerRowOutlet/>\n    <ng-container rowOutlet/>\n    <ng-container noDataRowOutlet/>\n    <ng-container footerRowOutlet/>\n  }\n`;\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n    _differs = inject(IterableDiffers);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _dir = inject(Directionality, { optional: true });\n    _platform = inject(Platform);\n    _viewRepeater = inject(_VIEW_REPEATER_STRATEGY);\n    _coalescedStyleScheduler = inject(_COALESCED_STYLE_SCHEDULER);\n    _viewportRuler = inject(ViewportRuler);\n    _stickyPositioningListener = inject(STICKY_POSITIONING_LISTENER, { optional: true, skipSelf: true });\n    _document = inject(DOCUMENT);\n    /** Latest data provided by the data source. */\n    _data;\n    /** Subject that emits when the component has been destroyed. */\n    _onDestroy = new Subject();\n    /** List of the rendered rows as identified by their `RenderRow` object. */\n    _renderRows;\n    /** Subscription that listens for the data provided by the data source. */\n    _renderChangeSubscription;\n    /**\n     * Map of all the user's defined columns (header, data, and footer cell template) identified by\n     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n     * any custom column definitions added to `_customColumnDefs`.\n     */\n    _columnDefsByName = new Map();\n    /**\n     * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n     * using `ContentChildren` as well as any custom row definitions added to `_customRowDefs`.\n     */\n    _rowDefs;\n    /**\n     * Set of all header row definitions that can be used by this table. Populated by the rows\n     * gathered by using `ContentChildren` as well as any custom row definitions added to\n     * `_customHeaderRowDefs`.\n     */\n    _headerRowDefs;\n    /**\n     * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n     * using `ContentChildren` as well as any custom row definitions added to\n     * `_customFooterRowDefs`.\n     */\n    _footerRowDefs;\n    /** Differ used to find the changes in the data provided by the data source. */\n    _dataDiffer;\n    /** Stores the row definition that does not have a when predicate. */\n    _defaultRowDef;\n    /**\n     * Column definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * column definitions as *its* content child.\n     */\n    _customColumnDefs = new Set();\n    /**\n     * Data row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in data rows as *its* content child.\n     */\n    _customRowDefs = new Set();\n    /**\n     * Header row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in header rows as *its* content child.\n     */\n    _customHeaderRowDefs = new Set();\n    /**\n     * Footer row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n     * built-in footer row as *its* content child.\n     */\n    _customFooterRowDefs = new Set();\n    /** No data row that was defined outside of the direct content children of the table. */\n    _customNoDataRow;\n    /**\n     * Whether the header row definition has been changed. Triggers an update to the header row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n    _headerRowDefChanged = true;\n    /**\n     * Whether the footer row definition has been changed. Triggers an update to the footer row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n    _footerRowDefChanged = true;\n    /**\n     * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n     * change.\n     */\n    _stickyColumnStylesNeedReset = true;\n    /**\n     * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n     * `false`, cached values will be used instead. This is only applicable to tables with\n     * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n     */\n    _forceRecalculateCellWidths = true;\n    /**\n     * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n     * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n     * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n     * and row template matches, which allows the `IterableDiffer` to check rows by reference\n     * and understand which rows are added/moved/removed.\n     *\n     * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n     * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n     * contains an array of created pairs. The array is necessary to handle cases where the data\n     * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n     * stored.\n     */\n    _cachedRenderRowsMap = new Map();\n    /** Whether the table is applied to a native `<table>`. */\n    _isNativeHtmlTable;\n    /**\n     * Utility class that is responsible for applying the appropriate sticky positioning styles to\n     * the table's rows and cells.\n     */\n    _stickyStyler;\n    /**\n     * CSS class added to any row or cell that has sticky positioning applied. May be overridden by\n     * table subclasses.\n     */\n    stickyCssClass = 'cdk-table-sticky';\n    /**\n     * Whether to manually add position: sticky to all sticky cell elements. Not needed if\n     * the position is set in a selector associated with the value of stickyCssClass. May be\n     * overridden by table subclasses\n     */\n    needsPositionStickyOnElement = true;\n    /** Whether the component is being rendered on the server. */\n    _isServer;\n    /** Whether the no data row is currently showing anything. */\n    _isShowingNoDataRow = false;\n    /** Whether the table has rendered out all the outlets for the first time. */\n    _hasAllOutlets = false;\n    /** Whether the table is done initializing. */\n    _hasInitialized = false;\n    /** Aria role to apply to the table's cells based on the table's own role. */\n    _getCellRole() {\n        // Perform this lazily in case the table's role was updated by a directive after construction.\n        if (this._cellRoleInternal === undefined) {\n            // Note that we set `role=\"cell\"` even on native `td` elements,\n            // because some browsers seem to require it. See #29784.\n            const tableRole = this._elementRef.nativeElement.getAttribute('role');\n            return tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n        }\n        return this._cellRoleInternal;\n    }\n    _cellRoleInternal = undefined;\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    set trackBy(fn) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    _trackByFn;\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    _dataSource;\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(value) {\n        this._multiTemplateDataRows = value;\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n            this.updateStickyColumnStyles();\n        }\n    }\n    _multiTemplateDataRows = false;\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n        return this._fixedLayout;\n    }\n    set fixedLayout(value) {\n        this._fixedLayout = value;\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n        this._forceRecalculateCellWidths = true;\n        this._stickyColumnStylesNeedReset = true;\n    }\n    _fixedLayout = false;\n    /**\n     * Emits when the table completes rendering a set of data rows based on the latest data from the\n     * data source, even if the set of rows is empty.\n     */\n    contentChanged = new EventEmitter();\n    // TODO(andrewseguin): Remove max value as the end index\n    //   and instead calculate the view on init and scroll.\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     *\n     * @docs-private\n     */\n    viewChange = new BehaviorSubject({\n        start: 0,\n        end: Number.MAX_VALUE,\n    });\n    // Outlets in the table's template where the header, data rows, and footer will be inserted.\n    _rowOutlet;\n    _headerRowOutlet;\n    _footerRowOutlet;\n    _noDataRowOutlet;\n    /**\n     * The column definitions provided by the user that contain what the header, data, and footer\n     * cells should render for each column.\n     */\n    _contentColumnDefs;\n    /** Set of data row definitions that were provided to the table as content children. */\n    _contentRowDefs;\n    /** Set of header row definitions that were provided to the table as content children. */\n    _contentHeaderRowDefs;\n    /** Set of footer row definitions that were provided to the table as content children. */\n    _contentFooterRowDefs;\n    /** Row definition that will only be rendered if there's no data in the table. */\n    _noDataRow;\n    _injector = inject(Injector);\n    constructor() {\n        const role = inject(new HostAttributeToken('role'), { optional: true });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'table');\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n    }\n    ngOnInit() {\n        this._setupStickyStyler();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            this._forceRecalculateCellWidths = true;\n        });\n    }\n    ngAfterContentInit() {\n        this._hasInitialized = true;\n    }\n    ngAfterContentChecked() {\n        // Only start re-rendering in `ngAfterContentChecked` after the first render.\n        if (this._canRender()) {\n            this._render();\n        }\n    }\n    ngOnDestroy() {\n        this._stickyStyler?.destroy();\n        [\n            this._rowOutlet?.viewContainer,\n            this._headerRowOutlet?.viewContainer,\n            this._footerRowOutlet?.viewContainer,\n            this._cachedRenderRowsMap,\n            this._customColumnDefs,\n            this._customRowDefs,\n            this._customHeaderRowDefs,\n            this._customFooterRowDefs,\n            this._columnDefsByName,\n        ].forEach((def) => {\n            def?.clear();\n        });\n        this._headerRowDefs = [];\n        this._footerRowDefs = [];\n        this._defaultRowDef = null;\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            this._updateNoDataRow();\n            this.contentChanged.next();\n            return;\n        }\n        const viewContainer = this._rowOutlet.viewContainer;\n        this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), record => record.item.data, (change) => {\n            if (change.operation === _ViewRepeaterOperation.INSERTED && change.context) {\n                this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            const rowView = viewContainer.get(record.currentIndex);\n            rowView.context.$implicit = record.item.data;\n        });\n        this._updateNoDataRow();\n        this.contentChanged.next();\n        this.updateStickyColumnStyles();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n        this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        if (this._isNativeHtmlTable) {\n            const thead = closestTableSection(this._headerRowOutlet, 'thead');\n            if (thead) {\n                thead.style.display = headerRows.length ? '' : 'none';\n            }\n        }\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        if (this._isNativeHtmlTable) {\n            const tfoot = closestTableSection(this._footerRowOutlet, 'tfoot');\n            if (tfoot) {\n                tfoot.style.display = footerRows.length ? '' : 'none';\n            }\n        }\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\n        // don't need to be cleared unless either the sticky column config changes or one of the row\n        // defs change.\n        if ((this._isNativeHtmlTable && !this._fixedLayout) || this._stickyColumnStylesNeedReset) {\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n            this._stickyColumnStylesNeedReset = false;\n        }\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            // Collect all the rows rendered with this row definition.\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /** Invoked whenever an outlet is created and has been assigned to the table. */\n    _outletAssigned() {\n        // Trigger the first render once all outlets have been assigned. We do it this way, as\n        // opposed to waiting for the next `ngAfterContentChecked`, because we don't know when\n        // the next change detection will happen.\n        // Also we can't use queries to resolve the outlets, because they're wrapped in a\n        // conditional, so we have to rely on them being assigned via DI.\n        if (!this._hasAllOutlets &&\n            this._rowOutlet &&\n            this._headerRowOutlet &&\n            this._footerRowOutlet &&\n            this._noDataRowOutlet) {\n            this._hasAllOutlets = true;\n            // In some setups this may fire before `ngAfterContentInit`\n            // so we need a check here. See #28538.\n            if (this._canRender()) {\n                this._render();\n            }\n        }\n    }\n    /** Whether the table has all the information to start rendering. */\n    _canRender() {\n        return this._hasAllOutlets && this._hasInitialized;\n    }\n    /** Renders the table if its state has changed. */\n    _render() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length &&\n            !this._footerRowDefs.length &&\n            !this._rowDefs.length &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        const columnsChanged = this._renderUpdatedColumns();\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n        this._forceRecalculateCellWidths = rowDefsChanged;\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        else if (this._stickyColumnStylesNeedReset) {\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n            // called when it row data arrives. Otherwise, we need to call it proactively.\n            this.updateStickyColumnStyles();\n        }\n        this._checkStickyStates();\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        if (!this._data) {\n            return renderRows;\n        }\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            let data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                let renderRow = renderRowsForData[j];\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                if (cache.has(renderRow.rowDef)) {\n                    cache.get(renderRow.rowDef).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n            if (cachedRenderRows.length) {\n                const dataRow = cachedRenderRows.shift();\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name) &&\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows &&\n            defaultRowDefs.length > 1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc, def) => {\n            // The differ should be run for every column, even if `acc` is already\n            // true (see #29922)\n            const diff = !!def.getColumnsDiff();\n            return acc || diff;\n        };\n        // Force re-render data rows if the list of column definitions have changed.\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n        if (dataColumnsChanged) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed.\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n        if (headerColumnsChanged) {\n            this._forceRenderHeaderRows();\n        }\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n        if (footerColumnsChanged) {\n            this._forceRenderFooterRows();\n        }\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            if (this._rowOutlet) {\n                this._rowOutlet.viewContainer.clear();\n            }\n        }\n        this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n        const columnDefs = Array.from(rowDef?.columns || []).map(columnName => {\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return columnDef;\n        });\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            const viewRef = rowOutlet.viewContainer.get(i);\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n        const rowDef = renderRow.rowDef;\n        const context = { $implicit: renderRow.data };\n        return {\n            templateRef: rowDef.template,\n            context,\n            index,\n        };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        this._renderCellTemplateForItem(rowDef, context);\n        return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            const viewRef = viewContainer.get(renderIndex);\n            const context = viewRef.context;\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            const column = this._columnDefsByName.get(columnId);\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this._stickyColumnStylesNeedReset = true;\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener, this._injector);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n        return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n        const noDataRow = this._customNoDataRow || this._noDataRow;\n        if (!noDataRow) {\n            return;\n        }\n        const shouldShow = this._rowOutlet.viewContainer.length === 0;\n        if (shouldShow === this._isShowingNoDataRow) {\n            return;\n        }\n        const container = this._noDataRowOutlet.viewContainer;\n        if (shouldShow) {\n            const view = container.createEmbeddedView(noDataRow.templateRef);\n            const rootNode = view.rootNodes[0];\n            // Only add the attributes if we have a single root node since it's hard\n            // to figure out which one to add it to when there are multiple.\n            if (view.rootNodes.length === 1 && rootNode?.nodeType === this._document.ELEMENT_NODE) {\n                rootNode.setAttribute('role', 'row');\n                rootNode.classList.add(noDataRow._contentClassName);\n            }\n        }\n        else {\n            container.clear();\n        }\n        this._isShowingNoDataRow = shouldShow;\n        this._changeDetectorRef.markForCheck();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkTable, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.2.6\", type: CdkTable, isStandalone: true, selector: \"cdk-table, table[cdk-table]\", inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: [\"multiTemplateDataRows\", \"multiTemplateDataRows\", booleanAttribute], fixedLayout: [\"fixedLayout\", \"fixedLayout\", booleanAttribute] }, outputs: { contentChanged: \"contentChanged\" }, host: { properties: { \"class.cdk-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"cdk-table\" }, providers: [\n            { provide: CDK_TABLE, useExisting: CdkTable },\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ], queries: [{ propertyName: \"_noDataRow\", first: true, predicate: CdkNoDataRow, descendants: true }, { propertyName: \"_contentColumnDefs\", predicate: CdkColumnDef, descendants: true }, { propertyName: \"_contentRowDefs\", predicate: CdkRowDef, descendants: true }, { propertyName: \"_contentHeaderRowDefs\", predicate: CdkHeaderRowDef, descendants: true }, { propertyName: \"_contentFooterRowDefs\", predicate: CdkFooterRowDef, descendants: true }], exportAs: [\"cdkTable\"], ngImport: i0, template: \"\\n  <ng-content select=\\\"caption\\\"/>\\n  <ng-content select=\\\"colgroup, col\\\"/>\\n\\n  <!--\\n    Unprojected content throws a hydration error so we need this to capture it.\\n    It gets removed on the client so it doesn't affect the layout.\\n  -->\\n  @if (_isServer) {\\n    <ng-content/>\\n  }\\n\\n  @if (_isNativeHtmlTable) {\\n    <thead role=\\\"rowgroup\\\">\\n      <ng-container headerRowOutlet/>\\n    </thead>\\n    <tbody role=\\\"rowgroup\\\">\\n      <ng-container rowOutlet/>\\n      <ng-container noDataRowOutlet/>\\n    </tbody>\\n    <tfoot role=\\\"rowgroup\\\">\\n      <ng-container footerRowOutlet/>\\n    </tfoot>\\n  } @else {\\n    <ng-container headerRowOutlet/>\\n    <ng-container rowOutlet/>\\n    <ng-container noDataRowOutlet/>\\n    <ng-container footerRowOutlet/>\\n  }\\n\", isInline: true, styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"], dependencies: [{ kind: \"directive\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { kind: \"directive\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-table, table[cdk-table]', exportAs: 'cdkTable', template: CDK_TABLE_TEMPLATE, host: {\n                        'class': 'cdk-table',\n                        '[class.cdk-table-fixed-layout]': 'fixedLayout',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [\n                        { provide: CDK_TABLE, useExisting: CdkTable },\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], imports: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { trackBy: [{\n                type: Input\n            }], dataSource: [{\n                type: Input\n            }], multiTemplateDataRows: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], fixedLayout: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], contentChanged: [{\n                type: Output\n            }], _contentColumnDefs: [{\n                type: ContentChildren,\n                args: [CdkColumnDef, { descendants: true }]\n            }], _contentRowDefs: [{\n                type: ContentChildren,\n                args: [CdkRowDef, { descendants: true }]\n            }], _contentHeaderRowDefs: [{\n                type: ContentChildren,\n                args: [CdkHeaderRowDef, {\n                        descendants: true,\n                    }]\n            }], _contentFooterRowDefs: [{\n                type: ContentChildren,\n                args: [CdkFooterRowDef, {\n                        descendants: true,\n                    }]\n            }], _noDataRow: [{\n                type: ContentChild,\n                args: [CdkNoDataRow]\n            }] } });\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n/**\n * Finds the closest table section to an outlet. We can't use `HTMLElement.closest` for this,\n * because the node representing the outlet is a comment.\n */\nfunction closestTableSection(outlet, section) {\n    const uppercaseSection = section.toUpperCase();\n    let current = outlet.viewContainer.element.nativeElement;\n    while (current) {\n        // 1 is an element node.\n        const nodeName = current.nodeType === 1 ? current.nodeName : null;\n        if (nodeName === uppercaseSection) {\n            return current;\n        }\n        else if (nodeName === 'TABLE') {\n            // Stop traversing past the `table` node.\n            break;\n        }\n        current = current.parentNode;\n    }\n    return null;\n}\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n    _table = inject(CdkTable, { optional: true });\n    _options = inject(TEXT_COLUMN_OPTIONS, { optional: true });\n    /** Column name that should be used to reference this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    _name;\n    /**\n     * Text label that should be used for the column header. If this property is not\n     * set, the header text will default to the column name with its first letter capitalized.\n     */\n    headerText;\n    /**\n     * Accessor function to retrieve the data rendered for each cell. If this\n     * property is not set, the data cells will render the value found in the data's property matching\n     * the column's name. For example, if the column is named `id`, then the rendered value will be\n     * value defined by the data's `id` property.\n     */\n    dataAccessor;\n    /** Alignment of the cell values. */\n    justify = 'start';\n    /** @docs-private */\n    columnDef;\n    /**\n     * The column cell is provided to the column during `ngOnInit` with a static query.\n     * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n     * column definition was provided in the same view as the table, which is not the case with this\n     * component.\n     * @docs-private\n     */\n    cell;\n    /**\n     * The column headerCell is provided to the column during `ngOnInit` with a static query.\n     * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n     * column definition was provided in the same view as the table, which is not the case with this\n     * component.\n     * @docs-private\n     */\n    headerCell;\n    constructor() {\n        this._options = this._options || {};\n    }\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n        const name = this.name;\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkTextColumn, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.6\", type: CdkTextColumn, isStandalone: true, selector: \"cdk-text-column\", inputs: { name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\", justify: \"justify\" }, viewQueries: [{ propertyName: \"columnDef\", first: true, predicate: CdkColumnDef, descendants: true, static: true }, { propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true, static: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true, static: true }], ngImport: i0, template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: CdkColumnDef, selector: \"[cdkColumnDef]\", inputs: [\"cdkColumnDef\", \"sticky\", \"stickyEnd\"] }, { kind: \"directive\", type: CdkHeaderCellDef, selector: \"[cdkHeaderCellDef]\" }, { kind: \"directive\", type: CdkHeaderCell, selector: \"cdk-header-cell, th[cdk-header-cell]\" }, { kind: \"directive\", type: CdkCellDef, selector: \"[cdkCellDef]\" }, { kind: \"directive\", type: CdkCell, selector: \"cdk-cell, td[cdk-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-text-column',\n                    template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    imports: [CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCellDef, CdkCell],\n                }]\n        }], ctorParameters: () => [], propDecorators: { name: [{\n                type: Input\n            }], headerText: [{\n                type: Input\n            }], dataAccessor: [{\n                type: Input\n            }], justify: [{\n                type: Input\n            }], columnDef: [{\n                type: ViewChild,\n                args: [CdkColumnDef, { static: true }]\n            }], cell: [{\n                type: ViewChild,\n                args: [CdkCellDef, { static: true }]\n            }], headerCell: [{\n                type: ViewChild,\n                args: [CdkHeaderCellDef, { static: true }]\n            }] } });\n\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    CdkRecycleRows,\n    NoDataRowOutlet,\n];\nclass CdkTableModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkTableModule, imports: [ScrollingModule, CdkTable,\n            CdkRowDef,\n            CdkCellDef,\n            CdkCellOutlet,\n            CdkHeaderCellDef,\n            CdkFooterCellDef,\n            CdkColumnDef,\n            CdkCell,\n            CdkRow,\n            CdkHeaderCell,\n            CdkFooterCell,\n            CdkHeaderRow,\n            CdkHeaderRowDef,\n            CdkFooterRow,\n            CdkFooterRowDef,\n            DataRowOutlet,\n            HeaderRowOutlet,\n            FooterRowOutlet,\n            CdkTextColumn,\n            CdkNoDataRow,\n            CdkRecycleRows,\n            NoDataRowOutlet], exports: [CdkTable,\n            CdkRowDef,\n            CdkCellDef,\n            CdkCellOutlet,\n            CdkHeaderCellDef,\n            CdkFooterCellDef,\n            CdkColumnDef,\n            CdkCell,\n            CdkRow,\n            CdkHeaderCell,\n            CdkFooterCell,\n            CdkHeaderRow,\n            CdkHeaderRowDef,\n            CdkFooterRow,\n            CdkFooterRowDef,\n            DataRowOutlet,\n            HeaderRowOutlet,\n            FooterRowOutlet,\n            CdkTextColumn,\n            CdkNoDataRow,\n            CdkRecycleRows,\n            NoDataRowOutlet] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkTableModule, imports: [ScrollingModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: CdkTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: EXPORTED_DECLARATIONS,\n                    imports: [ScrollingModule, ...EXPORTED_DECLARATIONS],\n                }]\n        }] });\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n * @deprecated Implement the `CanStick` interface instead.\n * @breaking-change 19.0.0\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        /** Whether sticky positioning should be applied. */\n        get sticky() {\n            return this._sticky;\n        }\n        set sticky(v) {\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        _sticky = false;\n        /** Whether the sticky input has changed since it was last checked. */\n        _hasStickyChanged = false;\n        /** Whether the sticky value has changed since this was last called. */\n        hasStickyChanged() {\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n        constructor(...args) {\n            super(...args);\n        }\n    };\n}\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}