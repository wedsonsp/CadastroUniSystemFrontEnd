{"ast":null,"code":"import { inject } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nexport const authInterceptor = (req, next) => {\n  const authService = inject(AuthService);\n  const token = authService.getToken();\n  console.log('Interceptor - URL:', req.url);\n  console.log('Interceptor - Token presente:', !!token);\n  console.log('Interceptor - Token value:', token);\n  // Não adicionar token nas rotas de autenticação quando não há token\n  if (req.url.includes('/auth/authenticate') && !token) {\n    console.log('Interceptor - Pulando autenticação para login:', req.url);\n    console.log('Interceptor - Headers originais:', req.headers.keys());\n    return next(req);\n  }\n  if (token) {\n    console.log('Interceptor - Adicionando token para:', req.url);\n    const authReq = req.clone({\n      headers: req.headers.set('Authorization', `Bearer ${token}`)\n    });\n    return next(authReq);\n  }\n  console.log('Interceptor - Sem token para:', req.url);\n  return next(req);\n};","map":{"version":3,"names":["inject","AuthService","authInterceptor","req","next","authService","token","getToken","console","log","url","includes","headers","keys","authReq","clone","set"],"sources":["C:\\Users\\gabri\\OneDrive\\Documentos\\ProjetoWedsonFront\\src\\app\\core\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import { HttpInterceptorFn } from '@angular/common/http';\r\nimport { inject } from '@angular/core';\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\nexport const authInterceptor: HttpInterceptorFn = (req, next) => {\r\n  const authService = inject(AuthService);\r\n  const token = authService.getToken();\r\n\r\n  console.log('Interceptor - URL:', req.url);\r\n  console.log('Interceptor - Token presente:', !!token);\r\n  console.log('Interceptor - Token value:', token);\r\n\r\n  // Não adicionar token nas rotas de autenticação quando não há token\r\n  if (req.url.includes('/auth/authenticate') && !token) {\r\n    console.log('Interceptor - Pulando autenticação para login:', req.url);\r\n    console.log('Interceptor - Headers originais:', req.headers.keys());\r\n    return next(req);\r\n  }\r\n\r\n  if (token) {\r\n    console.log('Interceptor - Adicionando token para:', req.url);\r\n    const authReq = req.clone({\r\n      headers: req.headers.set('Authorization', `Bearer ${token}`)\r\n    });\r\n    return next(authReq);\r\n  }\r\n\r\n  console.log('Interceptor - Sem token para:', req.url);\r\n  return next(req);\r\n};\r\n\r\n"],"mappings":"AACA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAASC,WAAW,QAAQ,6BAA6B;AAEzD,OAAO,MAAMC,eAAe,GAAsBA,CAACC,GAAG,EAAEC,IAAI,KAAI;EAC9D,MAAMC,WAAW,GAAGL,MAAM,CAACC,WAAW,CAAC;EACvC,MAAMK,KAAK,GAAGD,WAAW,CAACE,QAAQ,EAAE;EAEpCC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEN,GAAG,CAACO,GAAG,CAAC;EAC1CF,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE,CAAC,CAACH,KAAK,CAAC;EACrDE,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEH,KAAK,CAAC;EAEhD;EACA,IAAIH,GAAG,CAACO,GAAG,CAACC,QAAQ,CAAC,oBAAoB,CAAC,IAAI,CAACL,KAAK,EAAE;IACpDE,OAAO,CAACC,GAAG,CAAC,gDAAgD,EAAEN,GAAG,CAACO,GAAG,CAAC;IACtEF,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEN,GAAG,CAACS,OAAO,CAACC,IAAI,EAAE,CAAC;IACnE,OAAOT,IAAI,CAACD,GAAG,CAAC;EAClB;EAEA,IAAIG,KAAK,EAAE;IACTE,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEN,GAAG,CAACO,GAAG,CAAC;IAC7D,MAAMI,OAAO,GAAGX,GAAG,CAACY,KAAK,CAAC;MACxBH,OAAO,EAAET,GAAG,CAACS,OAAO,CAACI,GAAG,CAAC,eAAe,EAAE,UAAUV,KAAK,EAAE;KAC5D,CAAC;IACF,OAAOF,IAAI,CAACU,OAAO,CAAC;EACtB;EAEAN,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEN,GAAG,CAACO,GAAG,CAAC;EACrD,OAAON,IAAI,CAACD,GAAG,CAAC;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}