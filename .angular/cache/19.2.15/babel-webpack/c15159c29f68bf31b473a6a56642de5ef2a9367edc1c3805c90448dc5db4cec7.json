{"ast":null,"code":"import { HttpContext } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./environment.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, environmentService) {\n      this.http = http;\n      this.environmentService = environmentService;\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      this.API_URL = this.environmentService.apiUrl;\n      // Verificar se há token salvo no localStorage\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      if (token && user) {\n        this.currentUserSubject.next(JSON.parse(user));\n      }\n    }\n    login(loginRequest) {\n      const headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      };\n      console.log('Enviando requisição de login para:', `${this.API_URL}/auth/authenticate`);\n      console.log('Dados:', loginRequest);\n      return this.http.post(`${this.API_URL}/auth/authenticate`, loginRequest, {\n        headers,\n        context: new HttpContext()\n      }).pipe(tap(response => {\n        console.log('Resposta do login:', response);\n        // Mapear isAdministrator para role\n        const user = {\n          ...response.user,\n          role: response.user.isAdministrator ? 'Admin' : 'User'\n        };\n        localStorage.setItem('token', response.token);\n        localStorage.setItem('user', JSON.stringify(user));\n        this.currentUserSubject.next(user);\n      }));\n    }\n    authenticate() {\n      return this.http.post(`${this.API_URL}/auth/authenticate`, {}).pipe(tap(user => {\n        // Mapear isAdministrator para role\n        const mappedUser = {\n          ...user,\n          role: user.isAdministrator ? 'Admin' : 'User'\n        };\n        this.currentUserSubject.next(mappedUser);\n      }));\n    }\n    logout() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      this.currentUserSubject.next(null);\n    }\n    getToken() {\n      return localStorage.getItem('token');\n    }\n    isAuthenticated() {\n      return !!this.getToken();\n    }\n    getCurrentUser() {\n      return this.currentUserSubject.value;\n    }\n    isAdmin() {\n      const user = this.getCurrentUser();\n      return user?.role === 'Admin';\n    }\n    hasPermission(permission) {\n      const user = this.getCurrentUser();\n      if (!user) return false;\n      switch (permission) {\n        case 'create_user':\n          return user.role === 'Admin';\n        case 'list_users':\n        case 'view_user':\n          return this.isAuthenticated();\n        default:\n          return false;\n      }\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.EnvironmentService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}