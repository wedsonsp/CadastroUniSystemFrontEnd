{"ast":null,"code":"import { HttpContext } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./environment.service\";\nexport class AuthService {\n  constructor(http, environmentService) {\n    this.http = http;\n    this.environmentService = environmentService;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.API_URL = this.environmentService.apiUrl;\n    // Verificar se há token salvo no localStorage\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('user');\n    if (token && user) {\n      this.currentUserSubject.next(JSON.parse(user));\n    }\n  }\n  login(loginRequest) {\n    const headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n    console.log('Enviando requisição de login para:', `${this.API_URL}/auth/authenticate`);\n    console.log('Dados:', loginRequest);\n    return this.http.post(`${this.API_URL}/auth/authenticate`, loginRequest, {\n      headers,\n      context: new HttpContext()\n    }).pipe(tap(response => {\n      console.log('Resposta do login:', response);\n      // Mapear isAdministrator para role\n      const user = {\n        ...response.user,\n        role: response.user.isAdministrator ? 'Admin' : 'User'\n      };\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('user', JSON.stringify(user));\n      this.currentUserSubject.next(user);\n    }));\n  }\n  authenticate() {\n    return this.http.post(`${this.API_URL}/auth/authenticate`, {}).pipe(tap(user => {\n      // Mapear isAdministrator para role\n      const mappedUser = {\n        ...user,\n        role: user.isAdministrator ? 'Admin' : 'User'\n      };\n      this.currentUserSubject.next(mappedUser);\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.currentUserSubject.next(null);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return user?.role === 'Admin';\n  }\n  hasPermission(permission) {\n    const user = this.getCurrentUser();\n    if (!user) return false;\n    switch (permission) {\n      case 'create_user':\n        return user.role === 'Admin';\n      case 'list_users':\n      case 'view_user':\n        return this.isAuthenticated();\n      default:\n        return false;\n    }\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.EnvironmentService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpContext","BehaviorSubject","tap","AuthService","constructor","http","environmentService","currentUserSubject","currentUser$","asObservable","API_URL","apiUrl","token","localStorage","getItem","user","next","JSON","parse","login","loginRequest","headers","console","log","post","context","pipe","response","role","isAdministrator","setItem","stringify","authenticate","mappedUser","logout","removeItem","getToken","isAuthenticated","getCurrentUser","value","isAdmin","hasPermission","permission","i0","ɵɵinject","i1","HttpClient","i2","EnvironmentService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\gabri\\OneDrive\\Documentos\\ProjetoWedsonFront\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { LoginRequest, LoginResponse, LoginTokenResponse, User } from '../models/user';\r\nimport { EnvironmentService } from './environment.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private readonly API_URL: string;\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient, private environmentService: EnvironmentService) {\r\n    this.API_URL = this.environmentService.apiUrl;\r\n    \r\n    // Verificar se há token salvo no localStorage\r\n    const token = localStorage.getItem('token');\r\n    const user = localStorage.getItem('user');\r\n    if (token && user) {\r\n      this.currentUserSubject.next(JSON.parse(user));\r\n    }\r\n  }\r\n\r\n  login(loginRequest: LoginRequest): Observable<LoginResponse> {\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json'\r\n    };\r\n    \r\n    console.log('Enviando requisição de login para:', `${this.API_URL}/auth/authenticate`);\r\n    console.log('Dados:', loginRequest);\r\n    \r\n    return this.http.post<LoginResponse>(`${this.API_URL}/auth/authenticate`, loginRequest, { \r\n      headers,\r\n      context: new HttpContext()\r\n    })\r\n      .pipe(\r\n        tap(response => {\r\n          console.log('Resposta do login:', response);\r\n          \r\n          // Mapear isAdministrator para role\r\n          const user = {\r\n            ...response.user,\r\n            role: response.user.isAdministrator ? 'Admin' : 'User'\r\n          };\r\n          \r\n          localStorage.setItem('token', response.token);\r\n          localStorage.setItem('user', JSON.stringify(user));\r\n          this.currentUserSubject.next(user);\r\n        })\r\n      );\r\n  }\r\n\r\n\r\n  authenticate(): Observable<User> {\r\n    return this.http.post<User>(`${this.API_URL}/auth/authenticate`, {})\r\n      .pipe(\r\n        tap(user => {\r\n          // Mapear isAdministrator para role\r\n          const mappedUser = {\r\n            ...user,\r\n            role: user.isAdministrator ? 'Admin' : 'User'\r\n          };\r\n          this.currentUserSubject.next(mappedUser);\r\n        })\r\n      );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    this.currentUserSubject.next(null);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.getToken();\r\n  }\r\n\r\n  getCurrentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  isAdmin(): boolean {\r\n    const user = this.getCurrentUser();\r\n    return user?.role === 'Admin';\r\n  }\r\n\r\n  hasPermission(permission: string): boolean {\r\n    const user = this.getCurrentUser();\r\n    if (!user) return false;\r\n    \r\n    switch (permission) {\r\n      case 'create_user':\r\n        return user.role === 'Admin';\r\n      case 'list_users':\r\n      case 'view_user':\r\n        return this.isAuthenticated();\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}